// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function toString(t) {
  if (t >= 783383531) {
    return "https";
  } else {
    return "http";
  }
}

var Protocol = /* module */[/* toString */toString];

function toString$1(t) {
  if (t >= 5048601) {
    return "eth";
  } else {
    return "eos";
  }
}

var Blockchain = /* module */[/* toString */toString$1];

function make(protocol, blockchain, host, port) {
  return {
          protocol: toString(protocol),
          blockchain: toString$1(blockchain),
          host: host,
          port: port
        };
}

var Network = /* module */[/* make */make];

var Account = /* module */[];

var Identity = /* module */[];

function toString$2(t) {
  if (t >= -244359263) {
    if (t >= 351584891) {
      return "firstname";
    } else {
      return "lastname";
    }
  } else if (t >= -271659236) {
    return "email";
  } else {
    return "birthdate";
  }
}

var PersonalField = /* module */[/* toString */toString$2];

function toString$3(t) {
  if (t >= 67859985) {
    if (t >= 487289268) {
      if (t >= 492419670) {
        return "country";
      } else {
        return "address";
      }
    } else if (t >= 190391438) {
      return "zipcode";
    } else {
      return "state";
    }
  } else if (t >= -1040989330) {
    return "phone";
  } else {
    return "city";
  }
}

var LocationField = /* module */[/* toString */toString$3];

var Instance = /* module */[];

function suggestNetwork(prim, prim$1) {
  return prim.suggestNetwork(prim$1);
}

function eos(prim, prim$1, prim$2, prim$3, prim$4) {
  return prim.eos(prim$1, prim$2, prim$3, prim$4);
}

function getIdentity(instance, $staropt$star, $staropt$star$1, $staropt$star$2, _) {
  var accounts = $staropt$star ? $staropt$star[0] : /* array */[];
  var personal = $staropt$star$1 ? $staropt$star$1[0] : /* array */[];
  var $$location = $staropt$star$2 ? $staropt$star$2[0] : /* array */[];
  return instance.getIdentity({
              accounts: accounts,
              personal: $$Array.map(toString$2, personal),
              location: $$Array.map(toString$3, $$location)
            });
}

function identity(prim) {
  return Js_primitive.null_undefined_to_opt(prim.identity);
}

function forgetIdentity(prim) {
  return prim.forgetIdentity();
}

function onLoad(callback) {
  document.addEventListener("scatterLoaded", callback);
  return /* () */0;
}

exports.Protocol = Protocol;
exports.Blockchain = Blockchain;
exports.Network = Network;
exports.Account = Account;
exports.Identity = Identity;
exports.PersonalField = PersonalField;
exports.LocationField = LocationField;
exports.Instance = Instance;
exports.suggestNetwork = suggestNetwork;
exports.eos = eos;
exports.getIdentity = getIdentity;
exports.identity = identity;
exports.forgetIdentity = forgetIdentity;
exports.onLoad = onLoad;
/* No side effect */
