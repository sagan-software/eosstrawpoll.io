// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TypedGlamor = require("bs-typed-glamor/src/TypedGlamor.bs.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Link$ReactTemplate = require("./Link.js");
var Route$ReactTemplate = require("./Route.js");
var Context$ReactTemplate = require("./Context.js");
var Contract$ReactTemplate = require("../Contract.js");
var AppStyles$ReactTemplate = require("./Styles/AppStyles.js");
var CommonStyles$ReactTemplate = require("./Styles/CommonStyles.js");

var Graphql_error = Caml_exceptions.create("PollPage-ReactTemplate.PollData.Graphql_error");

var ppx_printed_query = "query pollData($creator: String!, $id: String!)  {\npoll(creator: $creator, id: $id)  {\nid  \npollName  \npollCreator  \ntitle  \ndescription  \noptions  \nwhitelist  \nblacklist  \nminChoices  \nmaxChoices  \nopenTime  \ncloseTime  \nblockId  \nblockNum  \nblockTime  \ntrxId  \nmetadata  \nvotes  {\nid  \nvoter  \nvoterStaked  \nchoices  \nblockNum  \nblockTime  \ntrxId  \nmetadata  \n}\ncomments  {\nid  \ncommenter  \ncontent  \nblockTime  \ntrxId  \nmetadata  \n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["poll"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2) {
        tmp = /* None */0;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3) {
          var value$1 = match$3[0];
          var match$4 = value$1["id"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeString(match$4);
            if (match$5) {
              tmp$2 = match$5[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$4)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field id on type Poll is missing"
                ];
          }
          var match$6 = value$1["pollName"];
          var tmp$3;
          if (match$6 !== undefined) {
            var match$7 = Js_json.decodeString(match$6);
            if (match$7) {
              tmp$3 = match$7[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$6)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field pollName on type Poll is missing"
                ];
          }
          var match$8 = value$1["pollCreator"];
          var tmp$4;
          if (match$8 !== undefined) {
            var match$9 = Js_json.decodeString(match$8);
            if (match$9) {
              tmp$4 = match$9[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$8)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field pollCreator on type Poll is missing"
                ];
          }
          var match$10 = value$1["title"];
          var tmp$5;
          if (match$10 !== undefined) {
            var match$11 = Js_json.decodeString(match$10);
            if (match$11) {
              tmp$5 = match$11[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$10)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field title on type Poll is missing"
                ];
          }
          var match$12 = value$1["description"];
          var tmp$6;
          if (match$12 !== undefined) {
            var match$13 = Js_json.decodeString(match$12);
            if (match$13) {
              tmp$6 = match$13[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$12)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field description on type Poll is missing"
                ];
          }
          var match$14 = value$1["options"];
          var tmp$7;
          if (match$14 !== undefined) {
            var match$15 = Js_json.decodeArray(match$14);
            if (match$15) {
              tmp$7 = match$15[0].map((function (value) {
                      var match = Js_json.decodeString(value);
                      if (match) {
                        return match[0];
                      } else {
                        throw [
                              Graphql_error,
                              "Expected string, got " + JSON.stringify(value)
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$14)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field options on type Poll is missing"
                ];
          }
          var match$16 = value$1["whitelist"];
          var tmp$8;
          if (match$16 !== undefined) {
            var match$17 = Js_json.decodeArray(match$16);
            if (match$17) {
              tmp$8 = match$17[0].map((function (value) {
                      var match = Js_json.decodeString(value);
                      if (match) {
                        return match[0];
                      } else {
                        throw [
                              Graphql_error,
                              "Expected string, got " + JSON.stringify(value)
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$16)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field whitelist on type Poll is missing"
                ];
          }
          var match$18 = value$1["blacklist"];
          var tmp$9;
          if (match$18 !== undefined) {
            var match$19 = Js_json.decodeArray(match$18);
            if (match$19) {
              tmp$9 = match$19[0].map((function (value) {
                      var match = Js_json.decodeString(value);
                      if (match) {
                        return match[0];
                      } else {
                        throw [
                              Graphql_error,
                              "Expected string, got " + JSON.stringify(value)
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$18)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field blacklist on type Poll is missing"
                ];
          }
          var match$20 = value$1["minChoices"];
          var tmp$10;
          if (match$20 !== undefined) {
            var match$21 = Js_json.decodeNumber(match$20);
            if (match$21) {
              tmp$10 = match$21[0] | 0;
            } else {
              throw [
                    Graphql_error,
                    "Expected int, got " + JSON.stringify(match$20)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field minChoices on type Poll is missing"
                ];
          }
          var match$22 = value$1["maxChoices"];
          var tmp$11;
          if (match$22 !== undefined) {
            var match$23 = Js_json.decodeNumber(match$22);
            if (match$23) {
              tmp$11 = match$23[0] | 0;
            } else {
              throw [
                    Graphql_error,
                    "Expected int, got " + JSON.stringify(match$22)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field maxChoices on type Poll is missing"
                ];
          }
          var match$24 = value$1["openTime"];
          var tmp$12;
          if (match$24 !== undefined) {
            var match$25 = Js_json.decodeNumber(match$24);
            if (match$25) {
              tmp$12 = match$25[0] | 0;
            } else {
              throw [
                    Graphql_error,
                    "Expected int, got " + JSON.stringify(match$24)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field openTime on type Poll is missing"
                ];
          }
          var match$26 = value$1["closeTime"];
          var tmp$13;
          if (match$26 !== undefined) {
            var match$27 = Js_json.decodeNumber(match$26);
            if (match$27) {
              tmp$13 = match$27[0] | 0;
            } else {
              throw [
                    Graphql_error,
                    "Expected int, got " + JSON.stringify(match$26)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field closeTime on type Poll is missing"
                ];
          }
          var match$28 = value$1["blockId"];
          var tmp$14;
          if (match$28 !== undefined) {
            var match$29 = Js_json.decodeString(match$28);
            if (match$29) {
              tmp$14 = match$29[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$28)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field blockId on type Poll is missing"
                ];
          }
          var match$30 = value$1["blockNum"];
          var tmp$15;
          if (match$30 !== undefined) {
            var match$31 = Js_json.decodeNumber(match$30);
            if (match$31) {
              tmp$15 = match$31[0] | 0;
            } else {
              throw [
                    Graphql_error,
                    "Expected int, got " + JSON.stringify(match$30)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field blockNum on type Poll is missing"
                ];
          }
          var match$32 = value$1["blockTime"];
          var tmp$16;
          if (match$32 !== undefined) {
            var match$33 = Js_json.decodeString(match$32);
            if (match$33) {
              tmp$16 = match$33[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$32)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field blockTime on type Poll is missing"
                ];
          }
          var match$34 = value$1["trxId"];
          var tmp$17;
          if (match$34 !== undefined) {
            var match$35 = Js_json.decodeString(match$34);
            if (match$35) {
              tmp$17 = match$35[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$34)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field trxId on type Poll is missing"
                ];
          }
          var match$36 = value$1["metadata"];
          var tmp$18;
          if (match$36 !== undefined) {
            var match$37 = Js_json.decodeString(match$36);
            if (match$37) {
              tmp$18 = match$37[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$36)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field metadata on type Poll is missing"
                ];
          }
          var match$38 = value$1["votes"];
          var tmp$19;
          if (match$38 !== undefined) {
            var match$39 = Js_json.decodeArray(match$38);
            if (match$39) {
              tmp$19 = match$39[0].map((function (value) {
                      var match = Js_json.decodeObject(value);
                      if (match) {
                        var value$1 = match[0];
                        var match$1 = value$1["id"];
                        var tmp;
                        if (match$1 !== undefined) {
                          var match$2 = Js_json.decodeString(match$1);
                          if (match$2) {
                            tmp = match$2[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$1)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field id on type Vote is missing"
                              ];
                        }
                        var match$3 = value$1["voter"];
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var match$4 = Js_json.decodeString(match$3);
                          if (match$4) {
                            tmp$1 = match$4[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$3)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field voter on type Vote is missing"
                              ];
                        }
                        var match$5 = value$1["voterStaked"];
                        var tmp$2;
                        if (match$5 !== undefined) {
                          var match$6 = Js_json.decodeNumber(match$5);
                          if (match$6) {
                            tmp$2 = match$6[0] | 0;
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected int, got " + JSON.stringify(match$5)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field voterStaked on type Vote is missing"
                              ];
                        }
                        var match$7 = value$1["choices"];
                        var tmp$3;
                        if (match$7 !== undefined) {
                          var match$8 = Js_json.decodeArray(match$7);
                          if (match$8) {
                            tmp$3 = match$8[0].map((function (value) {
                                    var match = Js_json.decodeNumber(value);
                                    if (match) {
                                      return match[0] | 0;
                                    } else {
                                      throw [
                                            Graphql_error,
                                            "Expected int, got " + JSON.stringify(value)
                                          ];
                                    }
                                  }));
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected array, got " + JSON.stringify(match$7)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field choices on type Vote is missing"
                              ];
                        }
                        var match$9 = value$1["blockNum"];
                        var tmp$4;
                        if (match$9 !== undefined) {
                          var match$10 = Js_json.decodeNumber(match$9);
                          if (match$10) {
                            tmp$4 = match$10[0] | 0;
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected int, got " + JSON.stringify(match$9)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field blockNum on type Vote is missing"
                              ];
                        }
                        var match$11 = value$1["blockTime"];
                        var tmp$5;
                        if (match$11 !== undefined) {
                          var match$12 = Js_json.decodeString(match$11);
                          if (match$12) {
                            tmp$5 = match$12[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$11)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field blockTime on type Vote is missing"
                              ];
                        }
                        var match$13 = value$1["trxId"];
                        var tmp$6;
                        if (match$13 !== undefined) {
                          var match$14 = Js_json.decodeString(match$13);
                          if (match$14) {
                            tmp$6 = match$14[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$13)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field trxId on type Vote is missing"
                              ];
                        }
                        var match$15 = value$1["metadata"];
                        var tmp$7;
                        if (match$15 !== undefined) {
                          var match$16 = Js_json.decodeString(match$15);
                          if (match$16) {
                            tmp$7 = match$16[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$15)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field metadata on type Vote is missing"
                              ];
                        }
                        return {
                                id: tmp,
                                voter: tmp$1,
                                voterStaked: tmp$2,
                                choices: tmp$3,
                                blockNum: tmp$4,
                                blockTime: tmp$5,
                                trxId: tmp$6,
                                metadata: tmp$7
                              };
                      } else {
                        throw [
                              Graphql_error,
                              "Object is not a value"
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$38)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field votes on type Poll is missing"
                ];
          }
          var match$40 = value$1["comments"];
          var tmp$20;
          if (match$40 !== undefined) {
            var match$41 = Js_json.decodeArray(match$40);
            if (match$41) {
              tmp$20 = match$41[0].map((function (value) {
                      var match = Js_json.decodeObject(value);
                      if (match) {
                        var value$1 = match[0];
                        var match$1 = value$1["id"];
                        var tmp;
                        if (match$1 !== undefined) {
                          var match$2 = Js_json.decodeString(match$1);
                          if (match$2) {
                            tmp = match$2[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$1)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field id on type Comment is missing"
                              ];
                        }
                        var match$3 = value$1["commenter"];
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var match$4 = Js_json.decodeString(match$3);
                          if (match$4) {
                            tmp$1 = match$4[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$3)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field commenter on type Comment is missing"
                              ];
                        }
                        var match$5 = value$1["content"];
                        var tmp$2;
                        if (match$5 !== undefined) {
                          var match$6 = Js_json.decodeString(match$5);
                          if (match$6) {
                            tmp$2 = match$6[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$5)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field content on type Comment is missing"
                              ];
                        }
                        var match$7 = value$1["blockTime"];
                        var tmp$3;
                        if (match$7 !== undefined) {
                          var match$8 = Js_json.decodeString(match$7);
                          if (match$8) {
                            tmp$3 = match$8[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$7)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field blockTime on type Comment is missing"
                              ];
                        }
                        var match$9 = value$1["trxId"];
                        var tmp$4;
                        if (match$9 !== undefined) {
                          var match$10 = Js_json.decodeString(match$9);
                          if (match$10) {
                            tmp$4 = match$10[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$9)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field trxId on type Comment is missing"
                              ];
                        }
                        var match$11 = value$1["metadata"];
                        var tmp$5;
                        if (match$11 !== undefined) {
                          var match$12 = Js_json.decodeString(match$11);
                          if (match$12) {
                            tmp$5 = match$12[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$11)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field metadata on type Comment is missing"
                              ];
                        }
                        return {
                                id: tmp,
                                commenter: tmp$1,
                                content: tmp$2,
                                blockTime: tmp$3,
                                trxId: tmp$4,
                                metadata: tmp$5
                              };
                      } else {
                        throw [
                              Graphql_error,
                              "Object is not a value"
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$40)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field comments on type Poll is missing"
                ];
          }
          tmp$1 = {
            id: tmp$2,
            pollName: tmp$3,
            pollCreator: tmp$4,
            title: tmp$5,
            description: tmp$6,
            options: tmp$7,
            whitelist: tmp$8,
            blacklist: tmp$9,
            minChoices: tmp$10,
            maxChoices: tmp$11,
            openTime: tmp$12,
            closeTime: tmp$13,
            blockId: tmp$14,
            blockNum: tmp$15,
            blockTime: tmp$16,
            trxId: tmp$17,
            metadata: tmp$18,
            votes: tmp$19,
            comments: tmp$20
          };
        } else {
          throw [
                Graphql_error,
                "Object is not a value"
              ];
        }
        tmp = /* Some */[tmp$1];
      }
    } else {
      throw [
            Graphql_error,
            "Field poll on type Query is missing"
          ];
    }
    return {
            poll: tmp
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(creator, id, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "creator",
                  creator
                ],
                /* :: */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var creator = variables.creator;
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "creator",
                  creator
                ],
                /* :: */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var PollData = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var PollDataQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function reducer(action, state) {
  var i = action[0];
  var match = Belt_SetInt.has(state[/* choices */0], i);
  return /* Update */Block.__(0, [/* record */[/* choices */match ? Belt_SetInt.remove(state[/* choices */0], i) : Belt_SetInt.add(state[/* choices */0], i)]]);
}

var component = ReasonReact.reducerComponent("PollPage");

function renderOption(param, vote, i, option) {
  var send = param[/* send */3];
  var isSelected = Belt_SetInt.has(param[/* state */1][/* choices */0], i) || Js_option.getWithDefault(false, Js_option.map((function (vote) {
              return vote.choices.includes(i);
            }), vote));
  var onClick = function () {
    return Curry._1(send, /* ToggleChoice */[i]);
  };
  return React.createElement("li", {
              key: String(i),
              onClick: onClick
            }, option, isSelected ? "(selected)" : "(unselected)");
}

function castVote(self, context, poll, _) {
  var match = context[/* scatter */0];
  if (match) {
    Contract$ReactTemplate.fromScatter(match[0]).then((function (contract) {
                return contract.vote({
                            poll_creator: poll.pollCreator,
                            poll_name: poll.pollName,
                            voter: "alice",
                            choices: Belt_SetInt.toArray(self[/* state */1][/* choices */0]),
                            metadata: process.env.APP_LABEL
                          }, {
                            authorization: /* array */["alice@active"]
                          });
              })).then((function (result) {
              console.log("Created", result);
              Route$ReactTemplate.redirectTo(/* PollResults */Block.__(2, [
                      poll.pollCreator,
                      poll.pollName
                    ]));
              return Promise.resolve(/* () */0);
            })).catch((function (error) {
            console.log("Error voting", error);
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  } else {
    console.log("No scatter");
    return /* () */0;
  }
}

function getVote(context, poll) {
  return Js_option.andThen((function (accountName) {
                return Belt_Array.get(poll.votes.filter((function (v) {
                                  return v.voter === accountName;
                                })), 0);
              }), Context$ReactTemplate.accountName(context));
}

function make$1(context, accountName, pollName, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var pollData = make(accountName, pollName, /* () */0);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(PollDataQuery[/* make */3], [
                              /* Some */[pollData.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return "Loading...";
                                  } else if (result.tag) {
                                    var match = result[0].poll;
                                    if (match) {
                                      var poll = match[0];
                                      var vote = getVote(context, poll);
                                      var minChoices = poll.minChoices;
                                      var maxChoices = poll.maxChoices;
                                      var match$1 = minChoices === maxChoices;
                                      var match$2 = vote === /* None */0;
                                      return React.createElement("div", {
                                                  className: TypedGlamor.toString(AppStyles$ReactTemplate.main)
                                                }, React.createElement("h1", {
                                                      className: TypedGlamor.toString(CommonStyles$ReactTemplate.pageHeader)
                                                    }, poll.title), React.createElement("div", {
                                                      className: TypedGlamor.toString(CommonStyles$ReactTemplate.pagePrimaryBox)
                                                    }, React.createElement("p", undefined, match$1 ? "Select " + (String(minChoices) + " choices") : "Select " + (String(minChoices) + (" to " + (String(maxChoices) + " choices")))), React.createElement("ul", undefined, $$Array.mapi((function (param, param$1) {
                                                                return renderOption(self, vote, param, param$1);
                                                              }), poll.options)), React.createElement("div", undefined, React.createElement("button", {
                                                              className: TypedGlamor.toString(CommonStyles$ReactTemplate.button),
                                                              disabled: context[/* scatter */0] === /* None */0,
                                                              onClick: (function (param) {
                                                                  return castVote(self, context, poll, param);
                                                                })
                                                            }, match$2 ? "Vote" : "Change Vote"), ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* PollResults */Block.__(2, [
                                                                    poll.pollCreator,
                                                                    poll.pollName
                                                                  ]), /* None */0, /* array */["Results"])))));
                                    } else {
                                      return "Couldn't find poll";
                                    }
                                  } else {
                                    return result[0].message;
                                  }
                                })
                            ]));
            }),
          /* initialState */(function () {
              return /* record */[/* choices */Belt_SetInt.empty];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.PollData = PollData;
exports.PollDataQuery = PollDataQuery;
exports.reducer = reducer;
exports.component = component;
exports.renderOption = renderOption;
exports.castVote = castVote;
exports.getVote = getVote;
exports.make = make$1;
/* PollDataQuery Not a pure module */
