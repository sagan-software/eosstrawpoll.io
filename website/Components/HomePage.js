// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Belt = require("bs-platform/lib/js/belt.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TypedGlamor = require("bs-typed-glamor/src/TypedGlamor.bs.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Link$ReactTemplate = require("./Link.js");
var Helmet$ReactTemplate = require("../External/Helmet.js");
var PollForm$ReactTemplate = require("./PollForm.js");
var DateFormat$ReactTemplate = require("./DateFormat.js");
var HomePageStyles$ReactTemplate = require("./Styles/HomePageStyles.js");

var component = ReasonReact.statelessComponent("HomePage-ReactTemplate");

var Graphql_error = Caml_exceptions.create("HomePage-ReactTemplate.GetPolls.Graphql_error");

var ppx_printed_query = "query polls  {\npopularPolls: polls(sortBy: POPULARITY)  {\nid  \npollName  \npollCreator  \ntitle  \nwhitelist  \nblacklist  \nopenTime  \ncloseTime  \nblockTime  \nnumVotes  \n}\nnewPolls: polls  {\nid  \npollName  \npollCreator  \ntitle  \nwhitelist  \nblacklist  \nopenTime  \ncloseTime  \nblockTime  \n}\nclosingSoon: polls(sortBy: CLOSING)  {\nid  \npollName  \npollCreator  \ntitle  \nwhitelist  \nblacklist  \nopenTime  \ncloseTime  \nblockTime  \n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0];
    var match$1 = value$1["popularPolls"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      if (match$2) {
        tmp = match$2[0].map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match) {
                  var value$1 = match[0];
                  var match$1 = value$1["id"];
                  var tmp;
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeString(match$1);
                    if (match$2) {
                      tmp = match$2[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$1)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field id on type Poll is missing"
                        ];
                  }
                  var match$3 = value$1["pollName"];
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var match$4 = Js_json.decodeString(match$3);
                    if (match$4) {
                      tmp$1 = match$4[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$3)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollName on type Poll is missing"
                        ];
                  }
                  var match$5 = value$1["pollCreator"];
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeString(match$5);
                    if (match$6) {
                      tmp$2 = match$6[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$5)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollCreator on type Poll is missing"
                        ];
                  }
                  var match$7 = value$1["title"];
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var match$8 = Js_json.decodeString(match$7);
                    if (match$8) {
                      tmp$3 = match$8[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$7)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field title on type Poll is missing"
                        ];
                  }
                  var match$9 = value$1["whitelist"];
                  var tmp$4;
                  if (match$9 !== undefined) {
                    var match$10 = Js_json.decodeArray(match$9);
                    if (match$10) {
                      tmp$4 = match$10[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$9)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field whitelist on type Poll is missing"
                        ];
                  }
                  var match$11 = value$1["blacklist"];
                  var tmp$5;
                  if (match$11 !== undefined) {
                    var match$12 = Js_json.decodeArray(match$11);
                    if (match$12) {
                      tmp$5 = match$12[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$11)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blacklist on type Poll is missing"
                        ];
                  }
                  var match$13 = value$1["openTime"];
                  var tmp$6;
                  if (match$13 !== undefined) {
                    var match$14 = Js_json.decodeNumber(match$13);
                    if (match$14) {
                      tmp$6 = match$14[0] | 0;
                    } else {
                      throw [
                            Graphql_error,
                            "Expected int, got " + JSON.stringify(match$13)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field openTime on type Poll is missing"
                        ];
                  }
                  var match$15 = value$1["closeTime"];
                  var tmp$7;
                  if (match$15 !== undefined) {
                    var match$16 = Js_json.decodeNumber(match$15);
                    if (match$16) {
                      tmp$7 = match$16[0] | 0;
                    } else {
                      throw [
                            Graphql_error,
                            "Expected int, got " + JSON.stringify(match$15)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field closeTime on type Poll is missing"
                        ];
                  }
                  var match$17 = value$1["blockTime"];
                  var tmp$8;
                  if (match$17 !== undefined) {
                    var match$18 = Js_json.decodeString(match$17);
                    if (match$18) {
                      tmp$8 = match$18[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$17)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blockTime on type Poll is missing"
                        ];
                  }
                  var match$19 = value$1["numVotes"];
                  var tmp$9;
                  if (match$19 !== undefined) {
                    var match$20 = Js_json.decodeNumber(match$19);
                    if (match$20) {
                      tmp$9 = match$20[0] | 0;
                    } else {
                      throw [
                            Graphql_error,
                            "Expected int, got " + JSON.stringify(match$19)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field numVotes on type Poll is missing"
                        ];
                  }
                  return {
                          id: tmp,
                          pollName: tmp$1,
                          pollCreator: tmp$2,
                          title: tmp$3,
                          whitelist: tmp$4,
                          blacklist: tmp$5,
                          openTime: tmp$6,
                          closeTime: tmp$7,
                          blockTime: tmp$8,
                          numVotes: tmp$9
                        };
                } else {
                  throw [
                        Graphql_error,
                        "Object is not a value"
                      ];
                }
              }));
      } else {
        throw [
              Graphql_error,
              "Expected array, got " + JSON.stringify(match$1)
            ];
      }
    } else {
      throw [
            Graphql_error,
            "Field popularPolls on type Query is missing"
          ];
    }
    var match$3 = value$1["newPolls"];
    var tmp$1;
    if (match$3 !== undefined) {
      var match$4 = Js_json.decodeArray(match$3);
      if (match$4) {
        tmp$1 = match$4[0].map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match) {
                  var value$1 = match[0];
                  var match$1 = value$1["id"];
                  var tmp;
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeString(match$1);
                    if (match$2) {
                      tmp = match$2[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$1)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field id on type Poll is missing"
                        ];
                  }
                  var match$3 = value$1["pollName"];
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var match$4 = Js_json.decodeString(match$3);
                    if (match$4) {
                      tmp$1 = match$4[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$3)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollName on type Poll is missing"
                        ];
                  }
                  var match$5 = value$1["pollCreator"];
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeString(match$5);
                    if (match$6) {
                      tmp$2 = match$6[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$5)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollCreator on type Poll is missing"
                        ];
                  }
                  var match$7 = value$1["title"];
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var match$8 = Js_json.decodeString(match$7);
                    if (match$8) {
                      tmp$3 = match$8[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$7)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field title on type Poll is missing"
                        ];
                  }
                  var match$9 = value$1["whitelist"];
                  var tmp$4;
                  if (match$9 !== undefined) {
                    var match$10 = Js_json.decodeArray(match$9);
                    if (match$10) {
                      tmp$4 = match$10[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$9)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field whitelist on type Poll is missing"
                        ];
                  }
                  var match$11 = value$1["blacklist"];
                  var tmp$5;
                  if (match$11 !== undefined) {
                    var match$12 = Js_json.decodeArray(match$11);
                    if (match$12) {
                      tmp$5 = match$12[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$11)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blacklist on type Poll is missing"
                        ];
                  }
                  var match$13 = value$1["openTime"];
                  var tmp$6;
                  if (match$13 !== undefined) {
                    var match$14 = Js_json.decodeNumber(match$13);
                    if (match$14) {
                      tmp$6 = match$14[0] | 0;
                    } else {
                      throw [
                            Graphql_error,
                            "Expected int, got " + JSON.stringify(match$13)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field openTime on type Poll is missing"
                        ];
                  }
                  var match$15 = value$1["closeTime"];
                  var tmp$7;
                  if (match$15 !== undefined) {
                    var match$16 = Js_json.decodeNumber(match$15);
                    if (match$16) {
                      tmp$7 = match$16[0] | 0;
                    } else {
                      throw [
                            Graphql_error,
                            "Expected int, got " + JSON.stringify(match$15)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field closeTime on type Poll is missing"
                        ];
                  }
                  var match$17 = value$1["blockTime"];
                  var tmp$8;
                  if (match$17 !== undefined) {
                    var match$18 = Js_json.decodeString(match$17);
                    if (match$18) {
                      tmp$8 = match$18[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$17)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blockTime on type Poll is missing"
                        ];
                  }
                  return {
                          id: tmp,
                          pollName: tmp$1,
                          pollCreator: tmp$2,
                          title: tmp$3,
                          whitelist: tmp$4,
                          blacklist: tmp$5,
                          openTime: tmp$6,
                          closeTime: tmp$7,
                          blockTime: tmp$8
                        };
                } else {
                  throw [
                        Graphql_error,
                        "Object is not a value"
                      ];
                }
              }));
      } else {
        throw [
              Graphql_error,
              "Expected array, got " + JSON.stringify(match$3)
            ];
      }
    } else {
      throw [
            Graphql_error,
            "Field newPolls on type Query is missing"
          ];
    }
    var match$5 = value$1["closingSoon"];
    var tmp$2;
    if (match$5 !== undefined) {
      var match$6 = Js_json.decodeArray(match$5);
      if (match$6) {
        tmp$2 = match$6[0].map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match) {
                  var value$1 = match[0];
                  var match$1 = value$1["id"];
                  var tmp;
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeString(match$1);
                    if (match$2) {
                      tmp = match$2[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$1)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field id on type Poll is missing"
                        ];
                  }
                  var match$3 = value$1["pollName"];
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var match$4 = Js_json.decodeString(match$3);
                    if (match$4) {
                      tmp$1 = match$4[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$3)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollName on type Poll is missing"
                        ];
                  }
                  var match$5 = value$1["pollCreator"];
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeString(match$5);
                    if (match$6) {
                      tmp$2 = match$6[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$5)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollCreator on type Poll is missing"
                        ];
                  }
                  var match$7 = value$1["title"];
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var match$8 = Js_json.decodeString(match$7);
                    if (match$8) {
                      tmp$3 = match$8[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$7)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field title on type Poll is missing"
                        ];
                  }
                  var match$9 = value$1["whitelist"];
                  var tmp$4;
                  if (match$9 !== undefined) {
                    var match$10 = Js_json.decodeArray(match$9);
                    if (match$10) {
                      tmp$4 = match$10[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$9)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field whitelist on type Poll is missing"
                        ];
                  }
                  var match$11 = value$1["blacklist"];
                  var tmp$5;
                  if (match$11 !== undefined) {
                    var match$12 = Js_json.decodeArray(match$11);
                    if (match$12) {
                      tmp$5 = match$12[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$11)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blacklist on type Poll is missing"
                        ];
                  }
                  var match$13 = value$1["openTime"];
                  var tmp$6;
                  if (match$13 !== undefined) {
                    var match$14 = Js_json.decodeNumber(match$13);
                    if (match$14) {
                      tmp$6 = match$14[0] | 0;
                    } else {
                      throw [
                            Graphql_error,
                            "Expected int, got " + JSON.stringify(match$13)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field openTime on type Poll is missing"
                        ];
                  }
                  var match$15 = value$1["closeTime"];
                  var tmp$7;
                  if (match$15 !== undefined) {
                    var match$16 = Js_json.decodeNumber(match$15);
                    if (match$16) {
                      tmp$7 = match$16[0] | 0;
                    } else {
                      throw [
                            Graphql_error,
                            "Expected int, got " + JSON.stringify(match$15)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field closeTime on type Poll is missing"
                        ];
                  }
                  var match$17 = value$1["blockTime"];
                  var tmp$8;
                  if (match$17 !== undefined) {
                    var match$18 = Js_json.decodeString(match$17);
                    if (match$18) {
                      tmp$8 = match$18[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$17)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blockTime on type Poll is missing"
                        ];
                  }
                  return {
                          id: tmp,
                          pollName: tmp$1,
                          pollCreator: tmp$2,
                          title: tmp$3,
                          whitelist: tmp$4,
                          blacklist: tmp$5,
                          openTime: tmp$6,
                          closeTime: tmp$7,
                          blockTime: tmp$8
                        };
                } else {
                  throw [
                        Graphql_error,
                        "Object is not a value"
                      ];
                }
              }));
      } else {
        throw [
              Graphql_error,
              "Expected array, got " + JSON.stringify(match$5)
            ];
      }
    } else {
      throw [
            Graphql_error,
            "Field closingSoon on type Query is missing"
          ];
    }
    return {
            popularPolls: tmp,
            newPolls: tmp$1,
            closingSoon: tmp$2
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function make() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetPolls = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetPollsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(context, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return React.createElement("main", {
                          className: TypedGlamor.toString(HomePageStyles$ReactTemplate.main)
                        }, ReasonReact.element(/* None */0, /* None */0, Helmet$ReactTemplate.make(/* array */[
                                  React.createElement("title", undefined, "Home page"),
                                  React.createElement("meta", {
                                        content: "EOS Straw Poll",
                                        property: "og:title"
                                      }),
                                  React.createElement("meta", {
                                        content: "Home page!!!",
                                        property: "og:description"
                                      })
                                ])), React.createElement("div", {
                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.slogan)
                            }, "Create ", React.createElement("strong", undefined, "instant, real-time polls"), " on EOS"), React.createElement("div", {
                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.content)
                            }, React.createElement("div", {
                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.form)
                                }, ReasonReact.element(/* None */0, /* None */0, PollForm$ReactTemplate.make(context, /* array */[]))), ReasonReact.element(/* None */0, /* None */0, Curry.app(GetPollsQuery[/* make */3], [
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      (function (param) {
                                          var result = param[/* result */0];
                                          if (typeof result === "number") {
                                            return "Loading...";
                                          } else if (result.tag) {
                                            var response = result[0];
                                            return React.createElement("div", {
                                                        className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollLists)
                                                      }, React.createElement("div", {
                                                            className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollList)
                                                          }, React.createElement("h2", {
                                                                className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollListTitle)
                                                              }, "Popular Polls"), response.popularPolls.map((function (p, _) {
                                                                  new Date(p.blockTime + "Z");
                                                                  return React.createElement("div", {
                                                                              key: p.id,
                                                                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.poll)
                                                                            }, React.createElement("h3", {
                                                                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollTitle)
                                                                                }, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                                                            p.pollCreator,
                                                                                            p.pollName
                                                                                          ]), /* None */0, /* array */[p.title]))), React.createElement("p", {
                                                                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollInfo)
                                                                                }, String(p.numVotes) + " votes"));
                                                                }))), React.createElement("div", {
                                                            className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollList)
                                                          }, React.createElement("h2", {
                                                                className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollListTitle)
                                                              }, "Recently Created"), response.newPolls.map((function (p, _) {
                                                                  var date = new Date(p.blockTime + "Z");
                                                                  return React.createElement("div", {
                                                                              key: p.id,
                                                                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.poll)
                                                                            }, React.createElement("h3", {
                                                                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollTitle)
                                                                                }, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                                                            p.pollCreator,
                                                                                            p.pollName
                                                                                          ]), /* None */0, /* array */[p.title]))), React.createElement("p", {
                                                                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollInfo)
                                                                                }, "Created ", ReasonReact.element(/* None */0, /* None */0, DateFormat$ReactTemplate.make(date, /* array */[])), " by ", ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Profile */Block.__(0, [p.pollCreator]), /* Some */[TypedGlamor.toString(HomePageStyles$ReactTemplate.pollCreator)], /* array */[p.pollCreator]))));
                                                                }))), React.createElement("div", {
                                                            className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollList)
                                                          }, React.createElement("h2", {
                                                                className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollListTitle)
                                                              }, "Closing Soon"), response.closingSoon.map((function (p, _) {
                                                                  var date = new Date(p.closeTime * 1000);
                                                                  console.log("!!!!!!!!!!!", date, p);
                                                                  return React.createElement("div", {
                                                                              key: p.id,
                                                                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.poll)
                                                                            }, React.createElement("h3", {
                                                                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollTitle)
                                                                                }, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                                                            p.pollCreator,
                                                                                            p.pollName
                                                                                          ]), /* None */0, /* array */[p.title]))), React.createElement("p", {
                                                                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollInfo)
                                                                                }, "Closes ", ReasonReact.element(/* None */0, /* None */0, DateFormat$ReactTemplate.make(date, /* array */[]))));
                                                                }))));
                                          } else {
                                            return result[0].message;
                                          }
                                        })
                                    ]))));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var Id = Belt.Id;

var $$Array = Belt.$$Array;

var SortArray = Belt.SortArray;

var MutableQueue = Belt.MutableQueue;

var MutableStack = Belt.MutableStack;

var List = Belt.List;

var Range = Belt.Range;

var $$Set = Belt.$$Set;

var $$Map = Belt.$$Map;

var MutableSet = Belt.MutableSet;

var MutableMap = Belt.MutableMap;

var HashSet = Belt.HashSet;

var HashMap = Belt.HashMap;

var Option = Belt.Option;

var Result = Belt.Result;

var Debug = Belt.Debug;

var Cn = 0;

exports.Id = Id;
exports.$$Array = $$Array;
exports.SortArray = SortArray;
exports.MutableQueue = MutableQueue;
exports.MutableStack = MutableStack;
exports.List = List;
exports.Range = Range;
exports.$$Set = $$Set;
exports.$$Map = $$Map;
exports.MutableSet = MutableSet;
exports.MutableMap = MutableMap;
exports.HashSet = HashSet;
exports.HashMap = HashMap;
exports.Option = Option;
exports.Result = Result;
exports.Debug = Debug;
exports.Cn = Cn;
exports.component = component;
exports.GetPolls = GetPolls;
exports.GetPollsQuery = GetPollsQuery;
exports.make = make$1;
/* component Not a pure module */
