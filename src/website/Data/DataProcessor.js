// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Mongodb = require("mongodb");
var Data$ReactTemplate = require("./Data.js");
var Contract$ReactTemplate = require("../Contract.js");
var WebServerEnv$ReactTemplate = require("../Env/WebServerEnv.js");

function onCreate(client, fields) {
  client.db(WebServerEnv$ReactTemplate.mongoAppDb).collection("polls").save(Data$ReactTemplate.Poll[/* encode */1](/* record */[
            /* creator */fields[/* creator */0],
            /* title */fields[/* title */1],
            /* description */fields[/* description */2],
            /* options */fields[/* options */3],
            /* whitelist */fields[/* whitelist */4],
            /* blacklist */fields[/* whitelist */4],
            /* minChoices */fields[/* minChoices */6],
            /* maxChoices */fields[/* maxChoices */7],
            /* openTime */fields[/* openTime */8],
            /* closeTime */fields[/* closeTime */9],
            /* createTime */0,
            /* votes : array */[],
            /* comments : array */[]
          ]));
  return /* () */0;
}

function onChange(client, change) {
  var fullDocument = change.fullDocument;
  var name = fullDocument.name;
  var data = fullDocument.data;
  switch (name) {
    case "create" : 
        console.log("Create", onCreate(client, Contract$ReactTemplate.Create[/* decode */0](data)));
        return /* () */0;
    case "vote" : 
        console.log("Vote", Contract$ReactTemplate.Vote[/* decode */0](data));
        return /* () */0;
    default:
      console.log("something else", name);
      return /* () */0;
  }
}

function listen() {
  return Mongodb.MongoClient.connect(WebServerEnv$ReactTemplate.mongoUri).then((function (client) {
                console.log("Connected to MongoDB!!!!!!!!!");
                return Promise.resolve(client.db(WebServerEnv$ReactTemplate.mongoEosDb).collection("actions").watch(/* array */[{
                                    $match: Js_dict.fromList(/* :: */[
                                          /* tuple */[
                                            "fullDocument.account",
                                            WebServerEnv$ReactTemplate.contractAccount
                                          ],
                                          /* [] */0
                                        ])
                                  }]).on("change", (function (param) {
                                  return onChange(client, param);
                                })));
              }));
}

exports.onCreate = onCreate;
exports.onChange = onChange;
exports.listen = listen;
/* Js_dict Not a pure module */
