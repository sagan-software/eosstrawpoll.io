// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function valueEmpty(value) {
  if (typeof value === "number") {
    return true;
  } else if (value.tag) {
    return false;
  } else {
    return $$String.trim(value[0]) === "";
  }
}

function thenValidate(validate, previous, value, state) {
  var match = Curry._2(previous, value, state);
  if (match) {
    return /* Invalid */[match[0]];
  } else {
    return Curry._2(validate, value, state);
  }
}

function isRequired(value, _) {
  var match = valueEmpty(value);
  if (match) {
    return /* Invalid */["Required field"];
  } else {
    return /* Valid */0;
  }
}

var nameRegex = (/^[\.12345abcdefghijklmnopqrstuvwxyz]{1,12}$/);

function isName(value, _) {
  if (typeof value === "number" || value.tag) {
    return Pervasives.failwith("isName validator received bad input");
  } else {
    var match = !nameRegex.test(value[0]);
    if (match) {
      return /* Invalid */["Must be 1-12 characters long and only contain 1-5, a-z, and periods (.)"];
    } else {
      return /* Valid */0;
    }
  }
}

function stringLength(str) {
  return $$String.trim(str).length;
}

function atLeast(num, value, _) {
  if (typeof value === "number") {
    return Pervasives.failwith("atLeast validator received bad input");
  } else if (value.tag) {
    var match = value[0] <= num;
    if (match) {
      return /* Valid */0;
    } else {
      return /* Invalid */["Must be " + (String(num) + " or more.")];
    }
  } else {
    var match$1 = $$String.trim(value[0]).length >= num;
    if (match$1) {
      return /* Valid */0;
    } else {
      return /* Invalid */["Must be " + (String(num) + " characters or more.")];
    }
  }
}

function atMost(num, value, _) {
  if (typeof value === "number") {
    return Pervasives.failwith("atMost validator received bad input");
  } else if (value.tag) {
    var match = value[0] >= num;
    if (match) {
      return /* Valid */0;
    } else {
      return /* Invalid */["Must be " + (String(num) + " or less.")];
    }
  } else {
    var match$1 = $$String.trim(value[0]).length <= num;
    if (match$1) {
      return /* Valid */0;
    } else {
      return /* Invalid */["Must be " + (String(num) + " characters or less.")];
    }
  }
}

function isBetween(lower, upper) {
  return (function (param, param$1) {
      return thenValidate((function (param, param$1) {
                    return atMost(upper, param, param$1);
                  }), (function (param, param$1) {
                    return atLeast(lower, param, param$1);
                  }), param, param$1);
    });
}

exports.valueEmpty = valueEmpty;
exports.thenValidate = thenValidate;
exports.isRequired = isRequired;
exports.nameRegex = nameRegex;
exports.isName = isName;
exports.stringLength = stringLength;
exports.atLeast = atLeast;
exports.atMost = atMost;
exports.isBetween = isBetween;
/* nameRegex Not a pure module */
