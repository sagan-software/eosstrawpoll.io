// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Model$ReactTemplate = require("./Model.js");
var Server_Database$ReactTemplate = require("./Server_Database.js");

function blockByTrxId(mongo, trxId) {
  return Curry._1(Server_Database$ReactTemplate.EosBlocks[/* collection */1], mongo).find({
                  "block.transactions.trx.id": trxId
                }).limit(1).next();
}

function onCreateAction(mongo, trxId, block, data) {
  return Curry._2(Server_Database$ReactTemplate.Polls[/* save */7], mongo, {
              id: data.poll_creator + ("_" + (data.poll_id + ("_" + String(block.block_num)))),
              pollId: data.poll_id,
              pollCreator: data.poll_creator,
              title: data.title,
              description: data.description,
              options: data.options,
              whitelist: data.whitelist,
              blacklist: data.blacklist,
              minChoices: 0,
              maxChoices: 0,
              openTime: data.open_time,
              closeTime: data.close_time,
              blockId: block.block_id,
              blockNum: block.block_num,
              blockTime: block.block.timestamp,
              trxId: trxId,
              appLabel: data.app_label
            });
}

function onVoteAction(mongo, trxId, block, data) {
  return Curry._2(Server_Database$ReactTemplate.Votes[/* save */7], mongo, {
              id: data.poll_creator + ("_" + (data.poll_id + ("_" + (data.voter + ("_" + String(block.block_num)))))),
              pollId: data.poll_id,
              pollCreator: data.poll_creator,
              voter: data.voter,
              choices: data.choices,
              blockId: block.block_id,
              blockNum: block.block_num,
              blockTime: block.block.timestamp,
              trxId: trxId,
              appLabel: data.app_label
            });
}

function onCommentAction(mongo, trxId, block, data) {
  return Curry._2(Server_Database$ReactTemplate.Comments[/* save */7], mongo, {
              id: data.poll_creator + ("_" + (data.poll_id + ("_" + (data.commenter + ("_" + String(block.block_num)))))),
              pollId: data.poll_id,
              pollCreator: data.poll_creator,
              commenter: data.commenter,
              content: data.content,
              blockId: block.block_id,
              blockNum: block.block_num,
              blockTime: block.block.timestamp,
              trxId: trxId,
              appLabel: data.app_label
            });
}

function onSettingsAction(mongo, data) {
  return Curry._2(Server_Database$ReactTemplate.Settings[/* save */7], mongo, {
              id: data.account,
              account: data.account
            });
}

function onActionsChange(client, change) {
  var action = change.fullDocument;
  var name = action.name;
  var data = Belt_Option.getWithDefault(Js_primitive.null_undefined_to_opt(action.data), null);
  var trxId = action.trx_id;
  console.log("New action", name, action);
  setTimeout((function () {
          blockByTrxId(client, trxId).then((function (block) {
                    var b = Js_option.getWithDefault(Model$ReactTemplate.EosBlock[/* empty */0], (block == null) ? /* None */0 : [block]);
                    console.log("!!!!!! BLOaaCK", trxId, b);
                    switch (name) {
                      case "create" : 
                          onCreateAction(client, trxId, b, Curry._1(Model$ReactTemplate.EosAction[/* Decode */1][/* create */24], data));
                          break;
                      case "vote" : 
                          onVoteAction(client, trxId, b, Curry._1(Model$ReactTemplate.EosAction[/* Decode */1][/* vote */25], data));
                          break;
                      default:
                        console.log("unknown action:", name);
                    }
                    return Promise.resolve(/* () */0);
                  })).catch((function (e) {
                  console.log("Error getting block ", e);
                  return Promise.resolve(/* () */0);
                }));
          return /* () */0;
        }), 750);
  return /* () */0;
}

function onBlocksChange(mongo, logger, change) {
  var block = change.fullDocument;
  logger.info("block change", {
        block_num: block.block_num
      });
  Curry._2(Server_Database$ReactTemplate.Blocks[/* save */7], mongo, {
        id: block.block_id,
        num: block.block_num,
        time: block.block.timestamp
      });
  return /* () */0;
}

function listenToActions(mongo, _) {
  return Promise.resolve(Curry._1(Server_Database$ReactTemplate.EosActions[/* collection */1], mongo).watch(/* array */[{
                      $match: {
                        operationType: "insert",
                        "fullDocument.account": process.env.CONTRACT_ACCOUNT
                      }
                    }]).on("change", (function (param) {
                    return onActionsChange(mongo, param);
                  })));
}

function listenToBlocks(mongo, logger) {
  return Promise.resolve(Curry._1(Server_Database$ReactTemplate.EosBlocks[/* collection */1], mongo).watch(/* array */[{
                      $match: {
                        operationType: "insert"
                      }
                    }]).on("change", (function (param) {
                    return onBlocksChange(mongo, logger, param);
                  })));
}

function start(mongo, logger) {
  return Promise.all(/* tuple */[
              listenToActions(mongo, logger),
              listenToBlocks(mongo, logger)
            ]);
}

var MakeCollection = Server_Database$ReactTemplate.MakeCollection;

var Polls = Server_Database$ReactTemplate.Polls;

var Votes = Server_Database$ReactTemplate.Votes;

var Comments = Server_Database$ReactTemplate.Comments;

var Blocks = Server_Database$ReactTemplate.Blocks;

var Settings = Server_Database$ReactTemplate.Settings;

var EosActions = Server_Database$ReactTemplate.EosActions;

var EosBlocks = Server_Database$ReactTemplate.EosBlocks;

exports.MakeCollection = MakeCollection;
exports.Polls = Polls;
exports.Votes = Votes;
exports.Comments = Comments;
exports.Blocks = Blocks;
exports.Settings = Settings;
exports.EosActions = EosActions;
exports.EosBlocks = EosBlocks;
exports.blockByTrxId = blockByTrxId;
exports.onCreateAction = onCreateAction;
exports.onVoteAction = onVoteAction;
exports.onCommentAction = onCommentAction;
exports.onSettingsAction = onSettingsAction;
exports.onActionsChange = onActionsChange;
exports.onBlocksChange = onBlocksChange;
exports.listenToActions = listenToActions;
exports.listenToBlocks = listenToBlocks;
exports.start = start;
/* Server_Database-ReactTemplate Not a pure module */
