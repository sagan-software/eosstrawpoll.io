// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function MakeCollection() {
  return (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    });
}

var dbName = process.env.MONGO_APP_DB;

var Polls = (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    })(/* module */[
      /* dbName */dbName,
      /* collectionName */"polls"
    ]);

var dbName$1 = process.env.MONGO_APP_DB;

var Votes = (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    })(/* module */[
      /* dbName */dbName$1,
      /* collectionName */"votes"
    ]);

var dbName$2 = process.env.MONGO_APP_DB;

var Comments = (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    })(/* module */[
      /* dbName */dbName$2,
      /* collectionName */"comments"
    ]);

var dbName$3 = process.env.MONGO_APP_DB;

var include = (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    })(/* module */[
      /* dbName */dbName$3,
      /* collectionName */"blocks"
    ]);

function numPolls(client, block) {
  return Curry._2(Polls[/* find */3], {
                blockNum: block.num
              }, client).count();
}

var Blocks_000 = /* db */include[0];

var Blocks_001 = /* collection */include[1];

var Blocks_002 = /* findAll */include[2];

var Blocks_003 = /* find */include[3];

var Blocks_004 = /* channel */include[4];

var Blocks_005 = /* iterator */include[5];

var Blocks_006 = /* watch */include[6];

var Blocks_007 = /* save */include[7];

var Blocks = /* module */[
  Blocks_000,
  Blocks_001,
  Blocks_002,
  Blocks_003,
  Blocks_004,
  Blocks_005,
  Blocks_006,
  Blocks_007,
  /* numPolls */numPolls
];

var dbName$4 = process.env.MONGO_APP_DB;

var Settings = (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    })(/* module */[
      /* dbName */dbName$4,
      /* collectionName */"settings"
    ]);

var dbName$5 = process.env.MONGO_EOS_DB;

var EosActions = (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    })(/* module */[
      /* dbName */dbName$5,
      /* collectionName */"actions"
    ]);

var dbName$6 = process.env.MONGO_EOS_DB;

var EosBlocks = (function (funarg) {
      var db = function (client) {
        return client.db(funarg[/* dbName */0]);
      };
      var collection = function (client) {
        return client.db(funarg[/* dbName */0]).collection(funarg[/* collectionName */1]);
      };
      var findAll = function (client) {
        return collection(client).find();
      };
      var find = function (query, client) {
        return collection(client).find(query);
      };
      var channel = funarg[/* dbName */0] + ("/" + funarg[/* collectionName */1]);
      var iterator = function (pubsub) {
        return pubsub.asyncIterator(channel);
      };
      var watch = function (mongo, pubsub, toQuery) {
        collection(mongo).watch().on("change", (function (change) {
                pubsub.publish(channel, Curry._1(toQuery, change.fullDocument));
                return /* () */0;
              }));
        return /* () */0;
      };
      var save = function (mongo, $$document) {
        return collection(mongo).save($$document);
      };
      return /* module */[
              /* db */db,
              /* collection */collection,
              /* findAll */findAll,
              /* find */find,
              /* channel */channel,
              /* iterator */iterator,
              /* watch */watch,
              /* save */save
            ];
    })(/* module */[
      /* dbName */dbName$6,
      /* collectionName */"blocks"
    ]);

exports.MakeCollection = MakeCollection;
exports.Polls = Polls;
exports.Votes = Votes;
exports.Comments = Comments;
exports.Blocks = Blocks;
exports.Settings = Settings;
exports.EosActions = EosActions;
exports.EosBlocks = EosBlocks;
/* Polls Not a pure module */
