// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TypedGlamor = require("bs-typed-glamor/src/TypedGlamor.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Link$ReactTemplate = require("./Link.js");
var PollPage$ReactTemplate = require("./PollPage.js");
var AppStyles$ReactTemplate = require("./Styles/AppStyles.js");
var CommonStyles$ReactTemplate = require("./Styles/CommonStyles.js");

function reducer(action, _) {
  return /* Update */Block.__(0, [action[0]]);
}

function renderOption(_, option) {
  return React.createElement("li", undefined, React.createElement("span", undefined, option), React.createElement("span", undefined, "0 Votes"), React.createElement("span", undefined, "0%"));
}

function getResults(poll) {
  var dict = poll.votes.reduce((function (results, vote) {
          vote.choices.forEach((function (choice, rank) {
                  var key = String(choice);
                  var votes = Js_option.getWithDefault(/* array */[], Js_primitive.undefined_to_opt(results[key]));
                  var vote$1 = {
                    voter: vote.voter,
                    rank: rank,
                    staked: vote.voterStaked
                  };
                  votes.push(vote$1);
                  results[key] = votes;
                  return /* () */0;
                }));
          return results;
        }), { });
  return poll.options.map((function (label, index) {
                var indexStr = String(index);
                var votes = Js_option.getWithDefault(/* array */[], Js_primitive.undefined_to_opt(dict[indexStr]));
                return {
                        label: label,
                        votes: votes
                      };
              }));
}

function renderResult(totalResults, result) {
  var percent = result.votes.length / totalResults.numVotes * 100;
  return React.createElement("li", {
              key: result.label
            }, result.label, React.createElement("span", undefined, " | ", String(result.votes.length), " votes", " | ", Pervasives.string_of_float(percent), "%"));
}

function renderResults(poll) {
  var results = getResults(poll).sort((function (a, b) {
          return b.votes.length - a.votes.length | 0;
        }));
  var totalResults = {
    numVotes: results.reduce((function (total, option) {
            return total + option.votes.length | 0;
          }), 0)
  };
  console.log("RESULTS!!!", {
        results: results,
        votes: poll.votes
      });
  return React.createElement("ol", undefined, results.map((function (param) {
                    return renderResult(totalResults, param);
                  })));
}

var component = ReasonReact.reducerComponent("PollResultsPage-ReactTemplate");

function make(_, accountName, pollName, _$1) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var pollData = PollPage$ReactTemplate.PollData[/* make */7](accountName, pollName, /* () */0);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(PollPage$ReactTemplate.PollDataQuery[/* make */3], [
                              /* Some */[pollData.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return "Loading...";
                                  } else if (result.tag) {
                                    var match = result[0].poll;
                                    if (match) {
                                      var poll = match[0];
                                      return React.createElement("div", {
                                                  className: TypedGlamor.toString(AppStyles$ReactTemplate.main)
                                                }, React.createElement("h1", {
                                                      className: TypedGlamor.toString(CommonStyles$ReactTemplate.pageHeader)
                                                    }, poll.title), renderResults(poll), React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                                poll.pollCreator,
                                                                poll.pollName
                                                              ]), /* None */0, /* array */["Vote"]))));
                                    } else {
                                      return "Couldn't find poll";
                                    }
                                  } else {
                                    return result[0].message;
                                  }
                                })
                            ]));
            }),
          /* initialState */(function () {
              return /* EqualVotes */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.reducer = reducer;
exports.renderOption = renderOption;
exports.getResults = getResults;
exports.renderResult = renderResult;
exports.renderResults = renderResults;
exports.component = component;
exports.make = make;
/* component Not a pure module */
