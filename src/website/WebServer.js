// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Http = require("http");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Express = require("bs-express/src/Express.js");
var Graphql = require("graphql");
var Process = require("process");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var ReactApollo = require("react-apollo");
var ReactHelmet = require("react-helmet");
var Server = require("glamor/server");
var App$ReactTemplate = require("./Components/App.js");
var ApolloInMemoryCache = require("reason-apollo/src/ApolloInMemoryCache.bs.js");
var Route$ReactTemplate = require("./Route.js");
var Helmet$ReactTemplate = require("./External/Helmet.js");
var GraphQl$ReactTemplate = require("./External/GraphQl.js");
var GraphqlSubscriptions = require("graphql-subscriptions");
var ApolloServer$ReactTemplate = require("./External/ApolloServer.js");
var WebServerEnv$ReactTemplate = require("./Env/WebServerEnv.js");
var SubscriptionsTransportWs = require("subscriptions-transport-ws");
var DataProcessor$ReactTemplate = require("./Data/DataProcessor.js");
var ApolloSchemaLink$ReactTemplate = require("./External/ApolloSchemaLink.js");

DataProcessor$ReactTemplate.listen(/* () */0);

var typeDefs = "\n  type Query {\n    echo(message: String!): String!\n  }\n\n  type Subscription {\n    everySecond: Float!\n  }\n\n  schema {\n    query: Query\n    subscription: Subscription\n  }\n";

var pubsub = new GraphqlSubscriptions.PubSub();

setInterval((function () {
        pubsub.publish("everySecond", {
              everySecond: Date.now()
            });
        return /* () */0;
      }), 1000);

var Http$1 = /* module */[];

function make(schema, server, path) {
  return new SubscriptionsTransportWs.SubscriptionServer({
              execute: Graphql.execute,
              subscribe: Graphql.subscribe,
              schema: schema
            }, {
              server: server,
              path: path
            });
}

var SubscriptionServer = /* module */[/* make */make];

var schema = GraphQl$ReactTemplate.Schema[/* make */0](typeDefs, {
      Query: {
        echo: (function (_, args, _$1, _$2) {
            return Json_decode.field("message", Json_decode.string, args);
          })
      },
      Subscription: {
        everySecond: {
          subscribe: (function (_, _$1, _$2, _$3) {
              return pubsub.asyncIterator("everySecond");
            })
        }
      }
    });

var inMemoryCache = ApolloInMemoryCache.createInMemoryCache(/* None */0, /* None */0, /* () */0);

var apolloClient = ReasonApollo.createApolloClient(ApolloSchemaLink$ReactTemplate.make(schema), inMemoryCache, /* Some */[true], /* None */0, /* None */0, /* None */0, /* () */0);

function make$1(content, helmet, _) {
  var bodyAttributes = Helmet$ReactTemplate.toString(helmet.bodyAttributes);
  var htmlAttributes = Helmet$ReactTemplate.toString(helmet.htmlAttributes);
  var style = Helmet$ReactTemplate.toString(helmet.style);
  var title = Helmet$ReactTemplate.toString(helmet.title);
  var meta = Helmet$ReactTemplate.toString(helmet.meta);
  var script = Helmet$ReactTemplate.toString(helmet.script);
  var apolloState = JSON.stringify(apolloClient.extract());
  var styles = Server.renderStatic((function () {
          return content;
        }));
  var css = styles.css;
  var html = styles.html;
  var ids = JSON.stringify(styles.ids);
  return "<!DOCTYPE html>\n  <html " + (String(htmlAttributes) + (">\n    <head>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n      " + (String(title) + ("\n      " + (String(meta) + ("\n      " + (String(style) + ("\n      <script>\n        window.__APOLLO_STATE__ = " + (String(apolloState) + (";\n        window._glam = " + (String(ids) + (";\n      </script>\n      <style type=\"text/css\" data-glamor>\n        " + (String(css) + ("\n      </style>\n    </head>\n  <body " + (String(bodyAttributes) + (">\n    <div id=\"app\">" + (String(html) + ("</div>\n    <script src=\"" + (String(WebServerEnv$ReactTemplate.staticBaseUrl) + ("/client.js\"></script>\n    " + (String(script) + "\n  </body>\n  </html>\n")))))))))))))))))))));
}

var Template = /* module */[/* make */make$1];

var app = Express.App[/* make */15](/* () */0);

function renderHTML(_, req, res) {
  var path = Express.Request[/* path */16](req);
  var route = Route$ReactTemplate.fromString(path);
  console.log("PATH!!!", path, route);
  return ReactApollo.renderToStringWithData(ReasonReact.element(/* None */0, /* None */0, App$ReactTemplate.make(apolloClient, /* Some */[route], /* array */[]))).then((function (content) {
                var helmet = ReactHelmet.Helmet.renderStatic();
                var template = make$1(content, helmet, /* () */0);
                return Promise.resolve(Express.Response[/* sendString */2](template, res));
              }));
}

Express.App[/* useOnPathWithMany */3](app, "/graphql", /* array */[
      Express.Middleware[/* json */0](/* None */0, /* None */0, /* None */0, /* () */0),
      ApolloServer$ReactTemplate.Express[/* graphql */0](schema)
    ]);

Express.App[/* useOnPathWithMany */3](app, "/graphiql", /* array */[
      Express.Middleware[/* json */0](/* None */0, /* None */0, /* None */0, /* () */0),
      ApolloServer$ReactTemplate.Express[/* graphiql */1]("/graphql", "ws://localhost:3001/subscriptions")
    ]);

Express.App[/* useOnPath */2](app, "/", Express.PromiseMiddleware[/* from */0](renderHTML));

var server = Http.createServer(app);

server.listen(WebServerEnv$ReactTemplate.port, (function (e) {
        var exit = 0;
        var val;
        try {
          val = e;
          exit = 1;
        }
        catch (raw_exn){
          var exn = Js_exn.internalToOCamlException(raw_exn);
          if (exn[0] === Js_exn.$$Error) {
            console.log(exn[1]);
            Process.exit(1);
            return /* () */0;
          } else {
            throw exn;
          }
        }
        if (exit === 1) {
          make(schema, server, "/subscriptions");
          console.log("listening at localhost:" + String(WebServerEnv$ReactTemplate.port));
          return /* () */0;
        }
        
      }));

exports.typeDefs = typeDefs;
exports.pubsub = pubsub;
exports.Http = Http$1;
exports.SubscriptionServer = SubscriptionServer;
exports.schema = schema;
exports.inMemoryCache = inMemoryCache;
exports.apolloClient = apolloClient;
exports.Template = Template;
exports.app = app;
exports.renderHTML = renderHTML;
exports.server = server;
/*  Not a pure module */
