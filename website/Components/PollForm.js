// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Random = require("bs-platform/lib/js/random.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Formality__Form = require("re-formality/src/Formality__Form.bs.js");
var MaterialUIIcons = require("bs-material-ui-icons/src/MaterialUIIcons.js");
var MaterialUi_Grid = require("@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js");
var MaterialUi_Step = require("@jsiebern/bs-material-ui/src/MaterialUi_Step.bs.js");
var MaterialUi_Paper = require("@jsiebern/bs-material-ui/src/MaterialUi_Paper.bs.js");
var Eos$ReactTemplate = require("../External/Eos.js");
var MaterialUi_Button = require("@jsiebern/bs-material-ui/src/MaterialUi_Button.bs.js");
var MaterialUi_Stepper = require("@jsiebern/bs-material-ui/src/MaterialUi_Stepper.bs.js");
var MaterialUi_SvgIcon = require("@jsiebern/bs-material-ui/src/MaterialUi_SvgIcon.bs.js");
var Forms$ReactTemplate = require("./Forms.js");
var Route$ReactTemplate = require("./Route.js");
var MaterialUi_StepLabel = require("@jsiebern/bs-material-ui/src/MaterialUi_StepLabel.bs.js");
var MaterialUi_TextField = require("@jsiebern/bs-material-ui/src/MaterialUi_TextField.bs.js");
var Formality__Validation = require("re-formality/src/Formality__Validation.bs.js");
var MaterialUi_IconButton = require("@jsiebern/bs-material-ui/src/MaterialUi_IconButton.bs.js");
var Contract$ReactTemplate = require("../Contract.js");
var MaterialUi_StepContent = require("@jsiebern/bs-material-ui/src/MaterialUi_StepContent.bs.js");
var Formality__PublicHelpers = require("re-formality/src/Formality__PublicHelpers.bs.js");

function clamp(min, max, v) {
  return Math.min(max, Math.max(min, v));
}

function get(field, state) {
  if (typeof field === "number") {
    switch (field) {
      case 0 : 
          return /* String */Block.__(0, [state[/* pollName */0]]);
      case 1 : 
          return /* String */Block.__(0, [state[/* title */1]]);
      case 2 : 
          return /* String */Block.__(0, [state[/* description */2]]);
      case 4 : 
          return /* StringArray */Block.__(1, [state[/* options */3]]);
      case 5 : 
          return /* StringArray */Block.__(1, [state[/* whitelist */4]]);
      case 6 : 
          return /* StringArray */Block.__(1, [state[/* blacklist */5]]);
      case 7 : 
          return /* Int */Block.__(3, [state[/* minChoices */6]]);
      case 8 : 
          return /* Int */Block.__(3, [state[/* maxChoices */7]]);
      case 9 : 
          return /* Date */Block.__(2, [state[/* openTime */8]]);
      case 10 : 
          return /* Date */Block.__(2, [state[/* closeTime */9]]);
      default:
        return /* NoValue */0;
    }
  } else if (field.tag) {
    return /* NoValue */0;
  } else {
    return /* String */Block.__(0, [Belt_Option.getWithDefault(Belt_Array.get(state[/* options */3], field[0]), "")]);
  }
}

function update(param, state) {
  var value = param[1];
  var field = param[0];
  if (typeof field === "number") {
    switch (field) {
      case 0 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollName */value[0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 1 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollName */state[/* pollName */0],
                    /* title */value[0],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 2 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollName */state[/* pollName */0],
                    /* title */state[/* title */1],
                    /* description */value[0],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 3 : 
          state[/* options */3].push("");
          return state;
      case 4 : 
          var numOptions = state[/* options */3].length;
          var minChoices = clamp(1, numOptions, state[/* minChoices */6]);
          var maxChoices = clamp(1, numOptions, state[/* maxChoices */7]);
          return /* record */[
                  /* pollName */state[/* pollName */0],
                  /* title */state[/* title */1],
                  /* description */state[/* description */2],
                  /* options */state[/* options */3],
                  /* whitelist */state[/* whitelist */4],
                  /* blacklist */state[/* blacklist */5],
                  /* minChoices */minChoices,
                  /* maxChoices */maxChoices,
                  /* openTime */state[/* openTime */8],
                  /* closeTime */state[/* closeTime */9]
                ];
      case 5 : 
          if (typeof value === "number") {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            switch (value.tag | 0) {
              case 0 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */value[0].split(",").map((function (prim) {
                                  return prim.trim();
                                })),
                          /* blacklist */state[/* blacklist */5],
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */state[/* openTime */8],
                          /* closeTime */state[/* closeTime */9]
                        ];
              case 1 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */value[0],
                          /* blacklist */state[/* blacklist */5],
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */state[/* openTime */8],
                          /* closeTime */state[/* closeTime */9]
                        ];
              default:
                return Pervasives.failwith("Config.update function received bad input");
            }
          }
      case 6 : 
          if (typeof value === "number") {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            switch (value.tag | 0) {
              case 0 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */state[/* whitelist */4],
                          /* blacklist */value[0].split(",").map((function (prim) {
                                  return prim.trim();
                                })),
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */state[/* openTime */8],
                          /* closeTime */state[/* closeTime */9]
                        ];
              case 1 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */state[/* whitelist */4],
                          /* blacklist */value[0],
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */state[/* openTime */8],
                          /* closeTime */state[/* closeTime */9]
                        ];
              default:
                return Pervasives.failwith("Config.update function received bad input");
            }
          }
      case 7 : 
          if (typeof value === "number" || value.tag !== 3) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            var numOptions$1 = state[/* options */3].length;
            var minChoices$1 = clamp(1, numOptions$1, value[0]);
            var maxChoices$1 = clamp(minChoices$1, numOptions$1, state[/* maxChoices */7]);
            return /* record */[
                    /* pollName */state[/* pollName */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */minChoices$1,
                    /* maxChoices */maxChoices$1,
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 8 : 
          if (typeof value === "number" || value.tag !== 3) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            var numOptions$2 = state[/* options */3].length;
            var maxChoices$2 = clamp(1, numOptions$2, value[0]);
            var minChoices$2 = clamp(1, maxChoices$2, state[/* minChoices */6]);
            return /* record */[
                    /* pollName */state[/* pollName */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */minChoices$2,
                    /* maxChoices */maxChoices$2,
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 9 : 
          if (typeof value === "number") {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            switch (value.tag | 0) {
              case 0 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */state[/* whitelist */4],
                          /* blacklist */state[/* blacklist */5],
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */new Date(value[0]),
                          /* closeTime */state[/* closeTime */9]
                        ];
              case 2 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */state[/* whitelist */4],
                          /* blacklist */state[/* blacklist */5],
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */value[0],
                          /* closeTime */state[/* closeTime */9]
                        ];
              default:
                return Pervasives.failwith("Config.update function received bad input");
            }
          }
      case 10 : 
          if (typeof value === "number") {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            switch (value.tag | 0) {
              case 0 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */state[/* whitelist */4],
                          /* blacklist */state[/* blacklist */5],
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */state[/* openTime */8],
                          /* closeTime */new Date(value[0])
                        ];
              case 2 : 
                  return /* record */[
                          /* pollName */state[/* pollName */0],
                          /* title */state[/* title */1],
                          /* description */state[/* description */2],
                          /* options */state[/* options */3],
                          /* whitelist */state[/* whitelist */4],
                          /* blacklist */state[/* blacklist */5],
                          /* minChoices */state[/* minChoices */6],
                          /* maxChoices */state[/* maxChoices */7],
                          /* openTime */state[/* openTime */8],
                          /* closeTime */value[0]
                        ];
              default:
                return Pervasives.failwith("Config.update function received bad input");
            }
          }
      case 11 : 
          return state;
      
    }
  } else if (field.tag) {
    var index = field[0];
    return /* record */[
            /* pollName */state[/* pollName */0],
            /* title */state[/* title */1],
            /* description */state[/* description */2],
            /* options */state[/* options */3].filter((function (_, i) {
                    return i !== index;
                  })),
            /* whitelist */state[/* whitelist */4],
            /* blacklist */state[/* blacklist */5],
            /* minChoices */state[/* minChoices */6],
            /* maxChoices */state[/* maxChoices */7],
            /* openTime */state[/* openTime */8],
            /* closeTime */state[/* closeTime */9]
          ];
  } else if (typeof value === "number" || value.tag) {
    return Pervasives.failwith("Config.update function received bad input");
  } else {
    Belt_Array.set(state[/* options */3], field[0], value[0]);
    return state;
  }
}

var Validators = Formality__Validation.MakeValidators(/* module */[]);

var baseValidators = Curry._3(Validators[/* add */3], /* Description */2, /* record */[
      /* strategy : OnFirstChange */1,
      /* dependents : None */0,
      /* validate */(function (param, param$1) {
          return Forms$ReactTemplate.atMost(10, param, param$1);
        })
    ], Curry._3(Validators[/* add */3], /* Title */1, /* record */[
          /* strategy : OnFirstChange */1,
          /* dependents : None */0,
          /* validate */Forms$ReactTemplate.isRequired
        ], Validators[/* empty */0]));

var validators = Curry._3(Validators[/* add */3], /* Options */4, /* record */[
      /* strategy : OnFirstChange */1,
      /* dependents : Some */[Belt_List.fromArray(Belt_Array.range(0, 100).map((function (i) {
                    return /* Option */Block.__(0, [i]);
                  })))],
      /* validate */(function (value, _) {
          if (typeof value === "number" || value.tag !== 1) {
            return Pervasives.failwith("options validator received bad input");
          } else {
            var numOptions = value[0].filter((function (v) {
                    return v.trim() !== "";
                  })).length;
            if (numOptions < 2) {
              return /* Invalid */["Must have at least 2 or more options"];
            } else {
              return /* Valid */0;
            }
          }
        })
    ], Belt_Array.reduce(Belt_Array.range(0, 100), baseValidators, (function (result, i) {
            return Curry._3(Validators[/* add */3], /* Option */Block.__(0, [i]), /* record */[
                        /* strategy : OnFirstChange */1,
                        /* dependents : None */0,
                        /* validate */(function (param, param$1) {
                            return Forms$ReactTemplate.atMost(80, param, param$1);
                          })
                      ], result);
          })));

var Form = /* module */[
  /* valueEmpty */Forms$ReactTemplate.valueEmpty,
  /* thenValidate */Forms$ReactTemplate.thenValidate,
  /* isRequired */Forms$ReactTemplate.isRequired,
  /* nameRegex */Forms$ReactTemplate.nameRegex,
  /* isName */Forms$ReactTemplate.isName,
  /* stringLength */Forms$ReactTemplate.stringLength,
  /* atLeast */Forms$ReactTemplate.atLeast,
  /* atMost */Forms$ReactTemplate.atMost,
  /* isBetween */Forms$ReactTemplate.isBetween,
  /* get */get,
  /* update */update,
  /* Validators */Validators,
  /* baseValidators */baseValidators,
  /* validators */validators
];

var Container = Formality__Form.Make([
      get,
      update,
      Forms$ReactTemplate.valueEmpty,
      validators,
      [
        Validators[21],
        Validators[10]
      ]
    ]);

var component = ReasonReact.statelessComponent("PollForm-ReactTemplate");

Random.self_init(/* () */0);

function isValid(result) {
  if (result && result[0]) {
    return false;
  } else {
    return true;
  }
}

function renderOption(form, optionsResults, i, value) {
  var field = /* Option */Block.__(0, [i]);
  var results = Curry._1(form[/* results */2], field);
  var valid = isValid(results) && isValid(optionsResults);
  var canDelete = form[/* state */0][/* options */3].length > 2;
  var tmp;
  if (optionsResults) {
    var match = optionsResults[0];
    tmp = match ? match[0] : "Poll Option";
  } else {
    tmp = "Poll Option";
  }
  return React.createElement("div", {
              key: String(i)
            }, ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[!valid], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[tmp], /* Some */[/* Normal */-453122489], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                          Curry._2(form[/* change */4], field, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                          if (optionsResults && optionsResults[0]) {
                            return Curry._2(form[/* change */4], /* Options */4, /* StringArray */Block.__(1, [form[/* state */0][/* options */3]]));
                          } else {
                            return /* () */0;
                          }
                        })], /* Some */[(function () {
                          var lastOption = form[/* state */0][/* options */3].length - 1 | 0;
                          if (i >= lastOption) {
                            return Curry._2(form[/* change */4], /* AddOption */3, /* NoValue */0);
                          } else {
                            return 0;
                          }
                        })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[/* `String */[
                        -976970511,
                        value
                      ]], /* None */0, /* array */[])), ReasonReact.element(/* None */0, /* None */0, MaterialUi_IconButton.make(/* None */0, /* None */0, /* Some */[!canDelete], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[(function () {
                          Curry._2(form[/* change */4], /* DelOption */Block.__(1, [i]), /* NoValue */0);
                          if (optionsResults && optionsResults[0]) {
                            return Curry._2(form[/* change */4], /* Options */4, /* StringArray */Block.__(1, [form[/* state */0][/* options */3]]));
                          } else {
                            return /* () */0;
                          }
                        })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[ReasonReact.element(/* None */0, /* None */0, MaterialUi_SvgIcon.make(/* None */0, /* Some */[canDelete ? /* Error */106380200 : /* Disabled */-709493348], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[ReasonReact.element(/* None */0, /* None */0, MaterialUIIcons.Delete[/* make */0](/* array */[]))]))])));
}

function make(context, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(/* None */0, /* None */0, Curry._3(Container[/* make */8], /* record */[
                              /* pollName */Eos$ReactTemplate.Name[/* random */4](/* () */0),
                              /* title */"",
                              /* description */"",
                              /* options : array */[
                                "",
                                "",
                                ""
                              ],
                              /* whitelist : array */[],
                              /* blacklist : array */[],
                              /* minChoices */1,
                              /* maxChoices */1,
                              /* openTime */new Date(),
                              /* closeTime */new Date(Date.now() + 60 * 60 * 24 * 1000)
                            ], (function (state, _) {
                                console.log("Called with:", state);
                                var match = context[/* scatter */0];
                                var match$1 = context[/* identity */1];
                                if (match) {
                                  if (match$1) {
                                    var pollCreator = Caml_array.caml_array_get(match$1[0].accounts, 0).name;
                                    Contract$ReactTemplate.fromScatter(match[0]).then((function (contract) {
                                              return contract.create({
                                                          poll_creator: pollCreator,
                                                          poll_name: state[/* pollName */0],
                                                          title: state[/* title */1],
                                                          description: state[/* description */2],
                                                          options: state[/* options */3].filter((function (o) {
                                                                  return $$String.trim(o).length !== 0;
                                                                })),
                                                          whitelist: /* array */[],
                                                          blacklist: /* array */[],
                                                          min_choices: state[/* minChoices */6],
                                                          max_choices: state[/* maxChoices */7],
                                                          open_time: 0,
                                                          close_time: 0,
                                                          metadata: process.env.APP_LABEL
                                                        }, {
                                                          authorization: /* array */["" + (String(pollCreator) + "@active")]
                                                        });
                                            })).then((function () {
                                            return Promise.resolve(setTimeout((function () {
                                                              ReasonReact.Router[/* push */0](Route$ReactTemplate.toString(/* Poll */Block.__(1, [
                                                                          pollCreator,
                                                                          state[/* pollName */0]
                                                                        ])));
                                                              return /* () */0;
                                                            }), 1000));
                                          }));
                                    return /* () */0;
                                  } else {
                                    console.log("tried to create a poll without scatter or without an identity", context);
                                    return /* () */0;
                                  }
                                } else {
                                  console.log("tried to create a poll without scatter or without an identity", context);
                                  return /* () */0;
                                }
                              }), (function (form) {
                                var partial_arg = form[/* submit */6];
                                var partial_arg$1 = Formality__PublicHelpers.Dom[/* preventDefault */6];
                                var match = Curry._1(form[/* results */2], /* Title */1);
                                var tmp;
                                if (match) {
                                  var match$1 = match[0];
                                  tmp = match$1 ? match$1[0] : "Title";
                                } else {
                                  tmp = "Title";
                                }
                                var partial_arg$2 = Curry._1(form[/* results */2], /* Options */4);
                                return React.createElement("form", {
                                            autoComplete: "off",
                                            noValidate: true,
                                            onSubmit: (function (param) {
                                                return partial_arg$1(partial_arg, param);
                                              })
                                          }, ReasonReact.element(/* None */0, /* None */0, MaterialUi_Paper.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                    ReasonReact.element(/* None */0, /* None */0, MaterialUi_Stepper.make(/* Some */[/* `Int */[
                                                                3654863,
                                                                0
                                                              ]], /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[/* Vertical */-1010337642], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                              ReasonReact.element(/* Some */["required"], /* None */0, MaterialUi_Step.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                                        ReasonReact.element(/* None */0, /* None */0, MaterialUi_StepLabel.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */["Required Fields"])),
                                                                        ReasonReact.element(/* None */0, /* None */0, MaterialUi_StepContent.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                                                  React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[tmp], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* blur */5], /* Title */1, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event)]));
                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* change */4], /* Title */1, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                                                                  })], /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[/* `String */[
                                                                                                  -976970511,
                                                                                                  form[/* state */0][/* title */1]
                                                                                                ]], /* None */0, /* array */[]))),
                                                                                  React.createElement("div", undefined, $$Array.mapi((function (param, param$1) {
                                                                                              return renderOption(form, partial_arg$2, param, param$1);
                                                                                            }), form[/* state */0][/* options */3]))
                                                                                ]))
                                                                      ])),
                                                              ReasonReact.element(/* Some */["optional"], /* None */0, MaterialUi_Step.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                                        ReasonReact.element(/* None */0, /* None */0, MaterialUi_StepLabel.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */["Optional Fields"])),
                                                                        ReasonReact.element(/* None */0, /* None */0, MaterialUi_StepContent.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                                                  ReasonReact.element(/* None */0, /* None */0, MaterialUi_Grid.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                                                            ReasonReact.element(/* None */0, /* None */0, MaterialUi_Grid.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Min choices"], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* blur */5], /* MinChoices */7, /* Int */Block.__(3, [Caml_format.caml_int_of_string(Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event))]));
                                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* change */4], /* MinChoices */7, /* Int */Block.__(3, [Caml_format.caml_int_of_string(Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event))]));
                                                                                                                  })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["number"], /* Some */[/* `Int */[
                                                                                                                  3654863,
                                                                                                                  form[/* state */0][/* minChoices */6]
                                                                                                                ]], /* None */0, /* array */[]))])),
                                                                                            ReasonReact.element(/* None */0, /* None */0, MaterialUi_Grid.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Max choices"], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* blur */5], /* MaxChoices */8, /* Int */Block.__(3, [Caml_format.caml_int_of_string(Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event))]));
                                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* change */4], /* MaxChoices */8, /* Int */Block.__(3, [Caml_format.caml_int_of_string(Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event))]));
                                                                                                                  })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["number"], /* Some */[/* `Int */[
                                                                                                                  3654863,
                                                                                                                  form[/* state */0][/* maxChoices */7]
                                                                                                                ]], /* None */0, /* array */[]))]))
                                                                                          ])),
                                                                                  ReasonReact.element(/* None */0, /* None */0, MaterialUi_Grid.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[
                                                                                            ReasonReact.element(/* None */0, /* None */0, MaterialUi_Grid.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Open time"], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* blur */5], /* OpenTime */9, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event)]));
                                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* change */4], /* OpenTime */9, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                                                                                  })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["datetime-local"], /* Some */[/* `String */[
                                                                                                                  -976970511,
                                                                                                                  form[/* state */0][/* openTime */8].toISOString().slice(0, -1)
                                                                                                                ]], /* None */0, /* array */[]))])),
                                                                                            ReasonReact.element(/* None */0, /* None */0, MaterialUi_Grid.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Close time"], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* blur */5], /* CloseTime */10, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event)]));
                                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                                    return Curry._2(form[/* change */4], /* CloseTime */10, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                                                                                  })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["datetime-local"], /* Some */[/* `String */[
                                                                                                                  -976970511,
                                                                                                                  form[/* state */0][/* closeTime */9].toISOString().slice(0, -1)
                                                                                                                ]], /* None */0, /* array */[]))]))
                                                                                          ])),
                                                                                  React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Poll Name"], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* blur */5], /* PollName */0, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event)]));
                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* change */4], /* PollName */0, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                                                                  })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[/* `String */[
                                                                                                  -976970511,
                                                                                                  form[/* state */0][/* pollName */0]
                                                                                                ]], /* None */0, /* array */[]))),
                                                                                  React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Whitelist"], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* blur */5], /* Whitelist */5, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event)]));
                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* change */4], /* Whitelist */5, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                                                                  })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[/* `Array */[
                                                                                                  951901561,
                                                                                                  form[/* state */0][/* whitelist */4].map((function (a) {
                                                                                                          return /* `String */[
                                                                                                                  -976970511,
                                                                                                                  a
                                                                                                                ];
                                                                                                        }))
                                                                                                ]], /* None */0, /* array */[]))),
                                                                                  React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, MaterialUi_TextField.make(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[form[/* submitting */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Blacklist"], /* None */0, /* None */0, /* None */0, /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* blur */5], /* Blacklist */6, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event)]));
                                                                                                  })], /* Some */[(function ($$event) {
                                                                                                    return Curry._2(form[/* change */4], /* Blacklist */6, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                                                                  })], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[/* `Array */[
                                                                                                  951901561,
                                                                                                  form[/* state */0][/* blacklist */5].map((function (a) {
                                                                                                          return /* `String */[
                                                                                                                  -976970511,
                                                                                                                  a
                                                                                                                ];
                                                                                                        }))
                                                                                                ]], /* None */0, /* array */[])))
                                                                                ]))
                                                                      ]))
                                                            ])),
                                                    ReasonReact.element(/* None */0, /* None */0, MaterialUi_Button.make(/* None */0, /* Some */[/* Primary */-791844958], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[/* Large */48800667], /* Some */["submit"], /* Some */[/* Contained */-515484397], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */["Create Poll"]))
                                                  ])));
                              })));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.clamp = clamp;
exports.Form = Form;
exports.Container = Container;
exports.component = component;
exports.isValid = isValid;
exports.renderOption = renderOption;
exports.make = make;
/* Validators Not a pure module */
