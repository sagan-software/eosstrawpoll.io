// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Random = require("bs-platform/lib/js/random.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TypedGlamor = require("bs-typed-glamor/src/TypedGlamor.bs.js");
var Formality__Form = require("re-formality/src/Formality__Form.bs.js");
var Api$ReactTemplate = require("../Api.js");
var Icon$ReactTemplate = require("./Icon.js");
var Forms$ReactTemplate = require("./Forms.js");
var Route$ReactTemplate = require("./Route.js");
var Formality__Validation = require("re-formality/src/Formality__Validation.bs.js");
var Formality__PublicHelpers = require("re-formality/src/Formality__PublicHelpers.bs.js");
var PollFormStyles$ReactTemplate = require("./Styles/PollFormStyles.js");

function get(field, state) {
  if (typeof field === "number") {
    switch (field) {
      case 0 : 
          return /* String */Block.__(0, [state[/* pollId */0]]);
      case 1 : 
          return /* String */Block.__(0, [state[/* title */1]]);
      case 2 : 
          return /* String */Block.__(0, [state[/* description */2]]);
      case 5 : 
          return /* String */Block.__(0, [state[/* whitelist */4]]);
      case 6 : 
          return /* String */Block.__(0, [state[/* blacklist */5]]);
      case 7 : 
          return /* Int */Block.__(1, [state[/* minChoices */6]]);
      case 8 : 
          return /* Int */Block.__(1, [state[/* maxChoices */7]]);
      case 9 : 
          return /* String */Block.__(0, [state[/* openTime */8]]);
      case 10 : 
          return /* String */Block.__(0, [state[/* closeTime */9]]);
      default:
        return /* NoValue */0;
    }
  } else if (field.tag) {
    return /* NoValue */0;
  } else {
    return /* String */Block.__(0, [Belt_Option.getWithDefault(Belt_Array.get(state[/* options */3], field[0]), "")]);
  }
}

function update(param, state) {
  var value = param[1];
  var field = param[0];
  if (typeof field === "number") {
    switch (field) {
      case 0 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */value[0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 1 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */value[0],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 2 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */state[/* title */1],
                    /* description */value[0],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 3 : 
          state[/* options */3].push("");
          return state;
      case 4 : 
          return state;
      case 5 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */value[0],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 6 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */value[0],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 7 : 
          if (typeof value === "number" || !value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */value[0],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 8 : 
          if (typeof value === "number" || !value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */value[0],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 9 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */value[0],
                    /* closeTime */state[/* closeTime */9]
                  ];
          }
      case 10 : 
          if (typeof value === "number" || value.tag) {
            return Pervasives.failwith("Config.update function received bad input");
          } else {
            return /* record */[
                    /* pollId */state[/* pollId */0],
                    /* title */state[/* title */1],
                    /* description */state[/* description */2],
                    /* options */state[/* options */3],
                    /* whitelist */state[/* whitelist */4],
                    /* blacklist */state[/* blacklist */5],
                    /* minChoices */state[/* minChoices */6],
                    /* maxChoices */state[/* maxChoices */7],
                    /* openTime */state[/* openTime */8],
                    /* closeTime */value[0]
                  ];
          }
      
    }
  } else if (field.tag) {
    var index = field[0];
    return /* record */[
            /* pollId */state[/* pollId */0],
            /* title */state[/* title */1],
            /* description */state[/* description */2],
            /* options */state[/* options */3].filter((function (_, i) {
                    return i !== index;
                  })),
            /* whitelist */state[/* whitelist */4],
            /* blacklist */state[/* blacklist */5],
            /* minChoices */state[/* minChoices */6],
            /* maxChoices */state[/* maxChoices */7],
            /* openTime */state[/* openTime */8],
            /* closeTime */state[/* closeTime */9]
          ];
  } else if (typeof value === "number" || value.tag) {
    return Pervasives.failwith("Config.update function received bad input");
  } else {
    Belt_Array.set(state[/* options */3], field[0], value[0]);
    return state;
  }
}

var Validators = Formality__Validation.MakeValidators(/* module */[]);

var baseValidators = Curry._3(Validators[/* add */3], /* Description */2, /* record */[
      /* strategy : OnFirstChange */1,
      /* dependents : None */0,
      /* validate */(function (param, param$1) {
          return Forms$ReactTemplate.atMost(10, param, param$1);
        })
    ], Curry._3(Validators[/* add */3], /* Title */1, /* record */[
          /* strategy : OnFirstChange */1,
          /* dependents : None */0,
          /* validate */Forms$ReactTemplate.isRequired
        ], Validators[/* empty */0]));

var validators = Belt_Array.reduce(Belt_Array.range(0, 100), baseValidators, (function (result, i) {
        return Curry._3(Validators[/* add */3], /* Option */Block.__(0, [i]), /* record */[
                    /* strategy : OnFirstChange */1,
                    /* dependents : None */0,
                    /* validate */(function (param, param$1) {
                        return Forms$ReactTemplate.atMost(80, param, param$1);
                      })
                  ], result);
      }));

var Form = /* module */[
  /* valueEmpty */Forms$ReactTemplate.valueEmpty,
  /* thenValidate */Forms$ReactTemplate.thenValidate,
  /* isRequired */Forms$ReactTemplate.isRequired,
  /* nameRegex */Forms$ReactTemplate.nameRegex,
  /* isName */Forms$ReactTemplate.isName,
  /* stringLength */Forms$ReactTemplate.stringLength,
  /* atLeast */Forms$ReactTemplate.atLeast,
  /* atMost */Forms$ReactTemplate.atMost,
  /* isBetween */Forms$ReactTemplate.isBetween,
  /* get */get,
  /* update */update,
  /* Validators */Validators,
  /* baseValidators */baseValidators,
  /* validators */validators
];

var Container = Formality__Form.Make([
      get,
      update,
      Forms$ReactTemplate.valueEmpty,
      validators,
      [
        Validators[21],
        Validators[10]
      ]
    ]);

var component = ReasonReact.statelessComponent("PollForm-ReactTemplate");

function randomPollId() {
  var possibleChars = "12345abcdefghijklmnopqrstuvwxyz";
  var possibleCharsLength = possibleChars.length;
  var chosenChars = /* array */[];
  Belt_Array.forEach(Belt_Array.range(0, 11), (function () {
          var chosenIndex = Random.$$int(possibleCharsLength);
          var chosenChar = possibleChars.charAt(chosenIndex);
          chosenChars.push(chosenChar);
          return /* () */0;
        }));
  return chosenChars.join("");
}

Random.self_init(/* () */0);

function make(context, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(/* None */0, /* None */0, Curry._3(Container[/* make */8], /* record */[
                              /* pollId */"",
                              /* title */"",
                              /* description */"",
                              /* options : array */[
                                "",
                                "",
                                ""
                              ],
                              /* whitelist */"",
                              /* blacklist */"",
                              /* minChoices */1,
                              /* maxChoices */1,
                              /* openTime */"",
                              /* closeTime */""
                            ], (function (state, _) {
                                console.log("Called with:", state);
                                var match = $$String.trim(state[/* pollId */0]).length === 0;
                                var pollId = match ? randomPollId(/* () */0) : state[/* pollId */0];
                                var match$1 = context[/* scatter */0];
                                var match$2 = context[/* identity */1];
                                if (match$1) {
                                  if (match$2) {
                                    var pollCreator = Caml_array.caml_array_get(match$2[0].accounts, 0).name;
                                    Api$ReactTemplate.Contract[/* make */0](match$1[0]).then((function (contract) {
                                              return contract.create({
                                                          poll_creator: pollCreator,
                                                          poll_id: pollId,
                                                          title: state[/* title */1],
                                                          description: state[/* description */2],
                                                          options: state[/* options */3].filter((function (o) {
                                                                  return $$String.trim(o).length !== 0;
                                                                })),
                                                          whitelist: /* array */[],
                                                          blacklist: /* array */[],
                                                          min_choices: state[/* minChoices */6],
                                                          max_choices: state[/* maxChoices */7],
                                                          open_time: 0,
                                                          close_time: 0,
                                                          app_label: "eosstrawpoll"
                                                        }, {
                                                          authorization: /* array */["" + (String(pollCreator) + "@active")]
                                                        });
                                            })).then((function () {
                                            return Promise.resolve(setTimeout((function () {
                                                              ReasonReact.Router[/* push */0](Route$ReactTemplate.toString(/* Poll */Block.__(1, [
                                                                          pollCreator,
                                                                          pollId
                                                                        ])));
                                                              return /* () */0;
                                                            }), 1000));
                                          }));
                                    return /* () */0;
                                  } else {
                                    console.log("tried to create a poll without scatter or without an identity", context);
                                    return /* () */0;
                                  }
                                } else {
                                  console.log("tried to create a poll without scatter or without an identity", context);
                                  return /* () */0;
                                }
                              }), (function (form) {
                                var partial_arg = form[/* submit */6];
                                var partial_arg$1 = Formality__PublicHelpers.Dom[/* preventDefault */6];
                                var match = Curry._1(form[/* results */2], /* Title */1);
                                var tmp;
                                if (match) {
                                  var match$1 = match[0];
                                  tmp = match$1 ? React.createElement("div", {
                                          className: "failure"
                                        }, match$1[0]) : React.createElement("div", {
                                          className: "success"
                                        }, "✓");
                                } else {
                                  tmp = null;
                                }
                                return React.createElement("form", {
                                            className: TypedGlamor.toString(PollFormStyles$ReactTemplate.container),
                                            onSubmit: (function (param) {
                                                return partial_arg$1(partial_arg, param);
                                              })
                                          }, React.createElement("div", {
                                                className: TypedGlamor.toString(PollFormStyles$ReactTemplate.fields)
                                              }, React.createElement("div", {
                                                    className: TypedGlamor.toString(PollFormStyles$ReactTemplate.titleField)
                                                  }, React.createElement("input", {
                                                        className: TypedGlamor.toString(PollFormStyles$ReactTemplate.titleInput),
                                                        autoComplete: "off",
                                                        autoFocus: true,
                                                        disabled: form[/* submitting */3],
                                                        placeholder: "Title of your poll...",
                                                        value: form[/* state */0][/* title */1],
                                                        onBlur: (function ($$event) {
                                                            return Curry._2(form[/* blur */5], /* Title */1, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnBlur */3]($$event)]));
                                                          }),
                                                        onChange: (function ($$event) {
                                                            return Curry._2(form[/* change */4], /* Title */1, /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                          })
                                                      }), tmp), React.createElement("div", undefined, $$Array.mapi((function (i, value) {
                                                          var match = form[/* state */0][/* options */3].length > 2;
                                                          var match$1 = Curry._1(form[/* results */2], /* Option */Block.__(0, [i]));
                                                          var tmp;
                                                          if (match$1) {
                                                            var match$2 = match$1[0];
                                                            tmp = match$2 ? React.createElement("div", {
                                                                    className: "failure"
                                                                  }, match$2[0]) : React.createElement("div", {
                                                                    className: "success"
                                                                  }, "✓");
                                                          } else {
                                                            tmp = null;
                                                          }
                                                          return React.createElement("div", {
                                                                      key: String(i),
                                                                      className: TypedGlamor.toString(PollFormStyles$ReactTemplate.optionField)
                                                                    }, React.createElement("span", {
                                                                          className: TypedGlamor.toString(PollFormStyles$ReactTemplate.optionNum)
                                                                        }, String(i + 1 | 0), "."), React.createElement("input", {
                                                                          className: TypedGlamor.toString(PollFormStyles$ReactTemplate.optionInput),
                                                                          autoComplete: "off",
                                                                          placeholder: "Poll option...",
                                                                          value: value,
                                                                          onFocus: (function () {
                                                                              var lastOption = form[/* state */0][/* options */3].length - 1 | 0;
                                                                              var match = i >= lastOption;
                                                                              var field = match ? /* AddOption */3 : /* Options */4;
                                                                              return Curry._2(form[/* change */4], field, /* NoValue */0);
                                                                            }),
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* Option */Block.__(0, [i]), /* String */Block.__(0, [Formality__PublicHelpers.Dom[/* toValueOnChange */2]($$event)]));
                                                                            })
                                                                        }), match ? React.createElement("a", {
                                                                            className: TypedGlamor.toString(PollFormStyles$ReactTemplate.optionRemove),
                                                                            onClick: (function () {
                                                                                return Curry._2(form[/* change */4], /* DelOption */Block.__(1, [i]), /* NoValue */0);
                                                                              })
                                                                          }, Icon$ReactTemplate.minusSquare) : "", tmp);
                                                        }), form[/* state */0][/* options */3])), React.createElement("button", {
                                                    className: TypedGlamor.toString(PollFormStyles$ReactTemplate.submitButton),
                                                    type: "submit"
                                                  }, "Create Poll")));
                              })));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var Cn = 0;

exports.Cn = Cn;
exports.Form = Form;
exports.Container = Container;
exports.component = component;
exports.randomPollId = randomPollId;
exports.make = make;
/* Validators Not a pure module */
