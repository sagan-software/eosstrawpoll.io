// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Model$ReactTemplate = require("./Model.js");
var Server_Database$ReactTemplate = require("./Server_Database.js");

function blockByTrxId(mongo, trxId) {
  return Curry._1(Server_Database$ReactTemplate.EosBlocks[/* collection */1], mongo).find({
                  "block.transactions.trx.id": trxId
                }).limit(1).next();
}

function onCreateAction(mongo, logger, trxId, block, data) {
  var id = data.poll_creator + ("_" + (data.poll_id + ("_" + String(block.block_num))));
  var poll = {
    id: id,
    pollId: data.poll_id,
    pollCreator: data.poll_creator,
    title: data.title,
    description: data.description,
    options: data.options,
    whitelist: data.whitelist,
    blacklist: data.blacklist,
    minChoices: data.min_choices,
    maxChoices: data.max_choices,
    openTime: data.open_time,
    closeTime: data.close_time,
    blockId: block.block_id,
    blockNum: block.block_num,
    blockTime: block.block.timestamp,
    trxId: trxId,
    metadata: data.metadata
  };
  return Curry._2(Server_Database$ReactTemplate.Polls[/* save */7], mongo, poll).then((function () {
                  return Promise.resolve((logger.info("saved poll", {
                                    id: id
                                  }), /* () */0));
                })).catch((function (error) {
                return Promise.resolve((logger.error("error saving vote", {
                                  error: error,
                                  poll: poll
                                }), /* () */0));
              }));
}

function onVoteAction(mongo, logger, trxId, block, data) {
  return Curry._2(Server_Database$ReactTemplate.Polls[/* find */3], {
                    pollId: data.poll_id,
                    pollCreator: data.poll_creator
                  }, mongo).sort("blockTime", -1).next().then((function (poll) {
                if (poll == null) {
                  return Promise.resolve((logger.warn("couldn't find poll for vote", {
                                    pollId: data.poll_id,
                                    pollCreator: data.poll_creator
                                  }), /* () */0));
                } else {
                  var id = poll.id + ("_" + data.voter);
                  var vote = {
                    id: id,
                    pollRef: poll.id,
                    pollId: data.poll_id,
                    pollCreator: data.poll_creator,
                    voter: data.voter,
                    choices: data.choices,
                    blockId: block.block_id,
                    blockNum: block.block_num,
                    blockTime: block.block.timestamp,
                    trxId: trxId,
                    metadata: data.metadata
                  };
                  return Curry._1(Server_Database$ReactTemplate.Votes[/* collection */1], mongo).updateOne({
                                  id: id
                                }, {
                                  $set: vote
                                }, {
                                  upsert: true
                                }).then((function () {
                                  return Promise.resolve((logger.info("saved vote", {
                                                    blockNum: block.block_num,
                                                    id: id
                                                  }), /* () */0));
                                })).catch((function (error) {
                                return Promise.resolve((logger.error("error saving vote", {
                                                  error: error,
                                                  vote: vote
                                                }), /* () */0));
                              }));
                }
              }));
}

function onCommentAction(mongo, logger, trxId, block, data) {
  var id = data.poll_creator + ("_" + (data.poll_id + ("_" + (data.commenter + ("_" + String(block.block_num))))));
  var comment = {
    id: id,
    pollId: data.poll_id,
    pollCreator: data.poll_creator,
    commenter: data.commenter,
    content: data.content,
    blockId: block.block_id,
    blockNum: block.block_num,
    blockTime: block.block.timestamp,
    trxId: trxId,
    metadata: data.metadata
  };
  return Curry._2(Server_Database$ReactTemplate.Comments[/* save */7], mongo, comment).then((function () {
                  return Promise.resolve((logger.info("saved comment", {
                                    blockNum: block.block_num,
                                    id: id
                                  }), /* () */0));
                })).catch((function (error) {
                return Promise.resolve((logger.error("error saving comment", {
                                  error: error,
                                  comment: comment
                                }), /* () */0));
              }));
}

function onSettingsAction(mongo, _, data) {
  return Curry._1(Server_Database$ReactTemplate.Settings[/* collection */1], mongo).updateOne({
              id: data.account
            }, {
              $set: {
                id: data.account,
                account: data.account
              }
            }, {
              upsert: true
            });
}

function onActionsChange(mongo, logger, change) {
  var action = change.fullDocument;
  var data = Model$ReactTemplate.EosAction[/* getData */1](action);
  var trxId = action.trx_id;
  logger.debug("new action", {
        account: action.account,
        name: action.name
      });
  setTimeout((function () {
          blockByTrxId(mongo, trxId).then((function (block) {
                    var exit = 0;
                    if ((block == null) || !data) {
                      exit = 1;
                    } else {
                      var match = data[0];
                      switch (match.tag | 0) {
                        case 0 : 
                            onCreateAction(mongo, logger, trxId, block, match[0]);
                            break;
                        case 1 : 
                            exit = 1;
                            break;
                        case 2 : 
                            onVoteAction(mongo, logger, trxId, block, match[0]);
                            break;
                        case 3 : 
                            onCommentAction(mongo, logger, trxId, block, match[0]);
                            break;
                        
                      }
                    }
                    if (exit === 1) {
                      if (action.account === process.env.CONTRACT_ACCOUNT) {
                        logger.warn("unhandled action from our contract's account", {
                              action: action
                            });
                      }
                      
                    }
                    return Promise.resolve(/* () */0);
                  })).catch((function (error) {
                  logger.error("error getting block for action change", {
                        error: error,
                        action: action
                      });
                  return Promise.resolve(/* () */0);
                }));
          return /* () */0;
        }), 750);
  return /* () */0;
}

function start(mongo, logger) {
  return Promise.resolve(Curry._1(Server_Database$ReactTemplate.EosActions[/* collection */1], mongo).watch(/* array */[{
                      $match: {
                        operationType: "insert",
                        "fullDocument.account": process.env.CONTRACT_ACCOUNT
                      }
                    }]).on("change", (function (param) {
                    return onActionsChange(mongo, logger, param);
                  })));
}

var MakeCollection = Server_Database$ReactTemplate.MakeCollection;

var Polls = Server_Database$ReactTemplate.Polls;

var Votes = Server_Database$ReactTemplate.Votes;

var Comments = Server_Database$ReactTemplate.Comments;

var Blocks = Server_Database$ReactTemplate.Blocks;

var Settings = Server_Database$ReactTemplate.Settings;

var EosActions = Server_Database$ReactTemplate.EosActions;

var EosBlocks = Server_Database$ReactTemplate.EosBlocks;

exports.MakeCollection = MakeCollection;
exports.Polls = Polls;
exports.Votes = Votes;
exports.Comments = Comments;
exports.Blocks = Blocks;
exports.Settings = Settings;
exports.EosActions = EosActions;
exports.EosBlocks = EosBlocks;
exports.blockByTrxId = blockByTrxId;
exports.onCreateAction = onCreateAction;
exports.onVoteAction = onVoteAction;
exports.onCommentAction = onCommentAction;
exports.onSettingsAction = onSettingsAction;
exports.onActionsChange = onActionsChange;
exports.start = start;
/* Server_Database-ReactTemplate Not a pure module */
