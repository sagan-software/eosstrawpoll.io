webpackHotUpdate("main",{

/***/ "./src/website/Pages/HomePage.js":
/*!***************************************!*\
  !*** ./src/website/Pages/HomePage.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE


var Belt = __webpack_require__(/*! bs-platform/lib/js/belt.js */ "./node_modules/bs-platform/lib/js/belt.js");
var Block = __webpack_require__(/*! bs-platform/lib/js/block.js */ "./node_modules/bs-platform/lib/js/block.js");
var Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var Js_dict = __webpack_require__(/*! bs-platform/lib/js/js_dict.js */ "./node_modules/bs-platform/lib/js/js_dict.js");
var Js_json = __webpack_require__(/*! bs-platform/lib/js/js_json.js */ "./node_modules/bs-platform/lib/js/js_json.js");
var Belt_Array = __webpack_require__(/*! bs-platform/lib/js/belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");
var Belt_Option = __webpack_require__(/*! bs-platform/lib/js/belt_Option.js */ "./node_modules/bs-platform/lib/js/belt_Option.js");
var Caml_format = __webpack_require__(/*! bs-platform/lib/js/caml_format.js */ "./node_modules/bs-platform/lib/js/caml_format.js");
var ReasonReact = __webpack_require__(/*! reason-react/src/ReasonReact.js */ "./node_modules/reason-react/src/ReasonReact.js");
var TypedGlamor = __webpack_require__(/*! bs-typed-glamor/src/TypedGlamor.bs.js */ "./node_modules/bs-typed-glamor/src/TypedGlamor.bs.js");
var ReasonApollo = __webpack_require__(/*! reason-apollo/src/ReasonApollo.bs.js */ "./node_modules/reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = __webpack_require__(/*! bs-platform/lib/js/caml_exceptions.js */ "./node_modules/bs-platform/lib/js/caml_exceptions.js");
var Api$ReactTemplate = __webpack_require__(/*! ../Api.js */ "./src/website/Api.js");
var Env$ReactTemplate = __webpack_require__(/*! ../Env/Env.js */ "./src/website/Env/Env.js");
var Link$ReactTemplate = __webpack_require__(/*! ../Components/Link.js */ "./src/website/Components/Link.js");
var Util$ReactTemplate = __webpack_require__(/*! ../Util.js */ "./src/website/Util.js");
var Helmet$ReactTemplate = __webpack_require__(/*! ../External/Helmet.js */ "./src/website/External/Helmet.js");
var HomePageStyles$ReactTemplate = __webpack_require__(/*! ../Styles/HomePageStyles.js */ "./src/website/Styles/HomePageStyles.js");

function nameToString(name) {
  if (name >= 272307608) {
    if (name >= 473709981) {
      if (name >= 697659271) {
        return "whitelist";
      } else {
        return "blacklist";
      }
    } else if (name >= 382421989) {
      return "close_time";
    } else {
      return "title";
    }
  } else if (name !== 78198800) {
    if (name >= 167015550) {
      return "min_num_choices";
    } else {
      return "open_time";
    }
  } else {
    return "max_num_choices";
  }
}

function setTitle(inputs, value) {
  return /* record */[
          /* title */value,
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getTitle(state) {
  return state[/* title */0];
}

function setMinNumChoices(inputs, value) {
  var minNumChoices = Caml_format.caml_int_of_string(value);
  var maxNumChoices = Caml_format.caml_int_of_string(value);
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */minNumChoices,
          /* maxNumChoices */maxNumChoices,
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getMinNumChoices(state) {
  return String(state[/* minNumChoices */1]);
}

function setMaxNumChoices(inputs, value) {
  var minNumChoices = Caml_format.caml_int_of_string(value);
  var maxNumChoices = Caml_format.caml_int_of_string(value);
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */minNumChoices,
          /* maxNumChoices */maxNumChoices,
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getMaxNumChoices(state) {
  return String(state[/* maxNumChoices */2]);
}

function setOpenTime(inputs, value) {
  var openTime = /* Some */[new Date(value)];
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */openTime,
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getOpenTime(state) {
  return Belt_Option.mapWithDefault(state[/* openTime */3], "", (function (prim) {
                return prim.toISOString();
              }));
}

function setCloseTime(inputs, value) {
  var closeTime = /* Some */[new Date(value)];
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */closeTime,
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getCloseTime(inputs) {
  return Belt_Option.mapWithDefault(inputs[/* closeTime */4], "", (function (prim) {
                return prim.toISOString();
              }));
}

function setWhitelist(inputs, value) {
  var whitelist = value.split(",");
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */whitelist,
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getWhitelist(inputs) {
  return inputs[/* whitelist */5].join(", ");
}

function setBlacklist(inputs, value) {
  var blacklist = value.split(",");
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */blacklist
        ];
}

function getBlacklist(inputs) {
  return inputs[/* blacklist */6].join(", ");
}

function getInputValue(inputs, name) {
  if (name >= 272307608) {
    if (name >= 473709981) {
      if (name >= 697659271) {
        return inputs[/* whitelist */5].join(", ");
      } else {
        return inputs[/* blacklist */6].join(", ");
      }
    } else if (name >= 382421989) {
      return getCloseTime(inputs);
    } else {
      return inputs[/* title */0];
    }
  } else if (name !== 78198800) {
    if (name >= 167015550) {
      return String(inputs[/* minNumChoices */1]);
    } else {
      return getOpenTime(inputs);
    }
  } else {
    return String(inputs[/* maxNumChoices */2]);
  }
}

function setInputValue(inputs, name, value) {
  if (name >= 272307608) {
    if (name >= 473709981) {
      if (name >= 697659271) {
        return setWhitelist(inputs, value);
      } else {
        return setBlacklist(inputs, value);
      }
    } else if (name >= 382421989) {
      return setCloseTime(inputs, value);
    } else {
      return setTitle(inputs, value);
    }
  } else if (name !== 78198800) {
    if (name >= 167015550) {
      return setMinNumChoices(inputs, value);
    } else {
      return setOpenTime(inputs, value);
    }
  } else {
    return setMaxNumChoices(inputs, value);
  }
}

function reducer(action, state) {
  if (typeof action === "number") {
    return /* Update */Block.__(0, [/* record */[
                /* inputs */state[/* inputs */0],
                /* inputErrors */state[/* inputErrors */1],
                /* options */state[/* options */2],
                /* optionErrors */state[/* optionErrors */3],
                /* showAdvanced */!state[/* showAdvanced */4],
                /* recentPolls */state[/* recentPolls */5],
                /* popularPolls */state[/* popularPolls */6],
                /* recentVotes */state[/* recentVotes */7]
              ]]);
  } else {
    switch (action.tag | 0) {
      case 0 : 
          return /* Update */Block.__(0, [/* record */[
                      /* inputs */action[0],
                      /* inputErrors */state[/* inputErrors */1],
                      /* options */state[/* options */2],
                      /* optionErrors */state[/* optionErrors */3],
                      /* showAdvanced */state[/* showAdvanced */4],
                      /* recentPolls */state[/* recentPolls */5],
                      /* popularPolls */state[/* popularPolls */6],
                      /* recentVotes */state[/* recentVotes */7]
                    ]]);
      case 1 : 
          Belt_Array.set(state[/* options */2], action[0], action[1]);
          return /* Update */Block.__(0, [state]);
      case 2 : 
          return /* Update */Block.__(0, [state]);
      case 3 : 
          return /* Update */Block.__(0, [/* record */[
                      /* inputs */state[/* inputs */0],
                      /* inputErrors */state[/* inputErrors */1],
                      /* options */state[/* options */2],
                      /* optionErrors */state[/* optionErrors */3],
                      /* showAdvanced */state[/* showAdvanced */4],
                      /* recentPolls */action[0],
                      /* popularPolls */state[/* popularPolls */6],
                      /* recentVotes */state[/* recentVotes */7]
                    ]]);
      case 4 : 
          return /* Update */Block.__(0, [/* record */[
                      /* inputs */state[/* inputs */0],
                      /* inputErrors */state[/* inputErrors */1],
                      /* options */state[/* options */2],
                      /* optionErrors */state[/* optionErrors */3],
                      /* showAdvanced */state[/* showAdvanced */4],
                      /* recentPolls */state[/* recentPolls */5],
                      /* popularPolls */action[0],
                      /* recentVotes */state[/* recentVotes */7]
                    ]]);
      case 5 : 
          return /* Update */Block.__(0, [/* record */[
                      /* inputs */state[/* inputs */0],
                      /* inputErrors */state[/* inputErrors */1],
                      /* options */state[/* options */2],
                      /* optionErrors */state[/* optionErrors */3],
                      /* showAdvanced */state[/* showAdvanced */4],
                      /* recentPolls */state[/* recentPolls */5],
                      /* popularPolls */state[/* popularPolls */6],
                      /* recentVotes */action[0]
                    ]]);
      
    }
  }
}

function onInputChange(self, name, $$event) {
  var obj = $$event.target;
  var value = obj.value;
  var inputs = setInputValue(self[/* state */1][/* inputs */0], name, value);
  return Curry._1(self[/* send */3], /* SetInputs */Block.__(0, [inputs]));
}

var component = ReasonReact.reducerComponent("HomePage");

var eos = Util$ReactTemplate.loadEosReadOnly(/* () */0);

var Graphql_error = Caml_exceptions.create("HomePage-ReactTemplate.GetEcho.Graphql_error");

var ppx_printed_query = "query getEcho($message: String!)  {\necho(message: $message)  \n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["echo"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeString(match$1);
      if (match$2) {
        tmp = match$2[0];
      } else {
        throw [
              Graphql_error,
              "Expected string, got " + JSON.stringify(match$1)
            ];
      }
    } else {
      throw [
            Graphql_error,
            "Field echo on type Query is missing"
          ];
    }
    return {
            echo: tmp
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(message, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "message",
                  message
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var message = variables.message;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "message",
                  message
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetEcho = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetEchoQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(context, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              Promise.all(/* tuple */[
                      Api$ReactTemplate.pollRefs(eos, Env$ReactTemplate.codeName, "recentpolls", /* None */0, /* None */0, /* None */0, /* () */0),
                      Api$ReactTemplate.pollRefs(eos, Env$ReactTemplate.codeName, "popularpolls", /* None */0, /* None */0, /* None */0, /* () */0),
                      Api$ReactTemplate.voteRefs(eos, Env$ReactTemplate.codeName, "recentvotes", /* None */0, /* None */0, /* None */0, /* () */0)
                    ]).then((function (param) {
                      Curry._1(self[/* send */3], /* ChangeRecentPolls */Block.__(3, [Api$ReactTemplate.Data[/* fromResult */0](param[0])]));
                      Curry._1(self[/* send */3], /* ChangePopularPolls */Block.__(4, [Api$ReactTemplate.Data[/* fromResult */0](param[1])]));
                      Curry._1(self[/* send */3], /* ChangeRecentVotes */Block.__(5, [Api$ReactTemplate.Data[/* fromResult */0](param[2])]));
                      return Promise.resolve(/* () */0);
                    }));
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var echoQuery = make("PLEASE WORK!", /* () */0);
              var match = self[/* state */1][/* showAdvanced */4];
              var match$1 = self[/* state */1][/* popularPolls */6];
              var tmp;
              tmp = typeof match$1 === "number" ? (
                  match$1 === 0 ? "" : "Loading..."
                ) : (
                  match$1.tag ? "Failed to load" : React.createElement("ul", undefined, Belt_Array.map(match$1[0], (function (p) {
                                return React.createElement("li", {
                                            key: "" + (String(p) + (".creator_" + (String(p) + ".id")))
                                          }, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                      p[/* pollCreator */2],
                                                      String(p[/* pollId */1])
                                                    ]), /* None */0, /* array */[p[/* title */3]])));
                              })))
                );
              var match$2 = self[/* state */1][/* recentPolls */5];
              var tmp$1;
              tmp$1 = typeof match$2 === "number" ? (
                  match$2 === 0 ? "" : "Loading..."
                ) : (
                  match$2.tag ? "Failed to load" : React.createElement("ul", undefined, Belt_Array.map(match$2[0], (function (p) {
                                return React.createElement("li", {
                                            key: "" + (String(p) + (".creator_" + (String(p) + ".id")))
                                          }, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                      p[/* pollCreator */2],
                                                      String(p[/* pollId */1])
                                                    ]), /* None */0, /* array */[p[/* title */3]])));
                              })))
                );
              var match$3 = self[/* state */1][/* recentVotes */7];
              var tmp$2;
              tmp$2 = typeof match$3 === "number" ? (
                  match$3 === 0 ? "" : "Loading..."
                ) : (
                  match$3.tag ? "Failed to load" : React.createElement("ul", undefined, Belt_Array.map(match$3[0], (function (v) {
                                return React.createElement("li", {
                                            key: "" + (String(v) + (".pollCreator_" + (String(v) + (".pollId_" + (String(v) + ".voter")))))
                                          }, v[/* voter */4], " voted on ", ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                      v[/* pollCreator */2],
                                                      String(v[/* pollId */1])
                                                    ]), /* None */0, /* array */[v[/* pollTitle */3]])));
                              })))
                );
              return React.createElement("main", {
                          className: TypedGlamor.toString(HomePageStyles$ReactTemplate.main)
                        }, ReasonReact.element(/* None */0, /* None */0, Helmet$ReactTemplate.make(/* array */[
                                  React.createElement("title", undefined, "Home page"),
                                  React.createElement("meta", {
                                        content: "EOS Straw Poll",
                                        property: "og:title"
                                      }),
                                  React.createElement("meta", {
                                        content: "Home page!!!",
                                        property: "og:description"
                                      })
                                ])), React.createElement("form", {
                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.form)
                            }, React.createElement("h1", undefined, "Create a poll"), ReasonReact.element(/* None */0, /* None */0, Curry.app(GetEchoQuery[/* make */3], [
                                      /* Some */[echoQuery.variables],
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      (function (param) {
                                          var result = param[/* result */0];
                                          if (typeof result === "number") {
                                            return "Loading echo result";
                                          } else if (result.tag) {
                                            return result[0].echo;
                                          } else {
                                            return result[0].message;
                                          }
                                        })
                                    ])), React.createElement("label", undefined, React.createElement("input", {
                                      placeholder: "Type your question here",
                                      required: true,
                                      value: getInputValue(self[/* state */1][/* inputs */0], /* title */272307608),
                                      onChange: (function (param) {
                                          return onInputChange(self, /* title */272307608, param);
                                        })
                                    })), React.createElement("fieldset", {
                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.optionList)
                                }, React.createElement("legend", undefined, "Options"), React.createElement("label", {
                                      className: TypedGlamor.toString(HomePageStyles$ReactTemplate.option)
                                    }, React.createElement("input", {
                                          className: TypedGlamor.toString(HomePageStyles$ReactTemplate.optionInput),
                                          placeholder: "Enter poll option",
                                          required: true
                                        })), React.createElement("label", undefined, React.createElement("input", {
                                          placeholder: "Enter poll option",
                                          required: true
                                        })), React.createElement("label", undefined, React.createElement("input", {
                                          placeholder: "Enter poll option"
                                        }))), React.createElement("fieldset", undefined, React.createElement("legend", {
                                      onClick: (function () {
                                          return Curry._1(self[/* send */3], /* ToggleAdvanced */0);
                                        })
                                    }, "Advanced"), match ? React.createElement("div", undefined, React.createElement("label", undefined, "Min choices", React.createElement("input", {
                                                max: String(self[/* state */1][/* options */2].length),
                                                min: 1,
                                                type: "number",
                                                value: getInputValue(self[/* state */1][/* inputs */0], /* minNumChoices */167015550),
                                                onChange: (function (param) {
                                                    return onInputChange(self, /* minNumChoices */167015550, param);
                                                  })
                                              })), React.createElement("label", undefined, "Max choices", React.createElement("input", {
                                                max: String(self[/* state */1][/* options */2].length),
                                                min: 1,
                                                type: "number",
                                                value: getInputValue(self[/* state */1][/* inputs */0], /* maxNumChoices */78198800),
                                                onChange: (function (param) {
                                                    return onInputChange(self, /* maxNumChoices */78198800, param);
                                                  })
                                              })), React.createElement("label", undefined, "Open time", React.createElement("input", {
                                                type: "datetime-local",
                                                value: getInputValue(self[/* state */1][/* inputs */0], /* openTime */-298276617),
                                                onChange: (function (param) {
                                                    return onInputChange(self, /* openTime */-298276617, param);
                                                  })
                                              })), React.createElement("label", undefined, "Close time", React.createElement("input", {
                                                type: "datetime-local",
                                                value: getInputValue(self[/* state */1][/* inputs */0], /* closeTime */382421989),
                                                onChange: (function (param) {
                                                    return onInputChange(self, /* closeTime */382421989, param);
                                                  })
                                              })), React.createElement("label", undefined, "Whitelist", React.createElement("input", {
                                                pattern: "([\\w+]{1,12}(\\.\\w+)?)(,\\s*([\\w+]{1,12}(\\.\\w+)?))*",
                                                placeholder: "alice, bob, janice",
                                                value: getInputValue(self[/* state */1][/* inputs */0], /* whitelist */697659271),
                                                onChange: (function (param) {
                                                    return onInputChange(self, /* whitelist */697659271, param);
                                                  })
                                              })), React.createElement("label", undefined, "Blacklist", React.createElement("input", {
                                                pattern: "([\\w+]{1,12}(\\.\\w+)?)(,\\s*([\\w+]{1,12}(\\.\\w+)?))*",
                                                placeholder: "carol, jim, dan",
                                                value: getInputValue(self[/* state */1][/* inputs */0], /* blacklist */473709981),
                                                onChange: (function (param) {
                                                    return onInputChange(self, /* blacklist */473709981, param);
                                                  })
                                              }))) : React.createElement("div", undefined)), React.createElement("button", {
                                  type: "reset"
                                }, "Reset"), React.createElement("button", {
                                  disabled: context[/* scatter */0] === /* None */0,
                                  type: "submit"
                                }, "Create Poll")), React.createElement("aside", {
                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.sidebar)
                            }, React.createElement("div", {
                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.poll)
                                }, React.createElement("h2", {
                                      className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollTitle)
                                    }, "Popular Polls"), tmp), React.createElement("div", undefined, React.createElement("h2", {
                                      className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollTitle)
                                    }, "Recent Polls"), tmp$1), React.createElement("div", undefined, React.createElement("h2", {
                                      className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollTitle)
                                    }, "Recent Votes"), tmp$2)));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* inputs : record */[
                        /* title */"",
                        /* minNumChoices */1,
                        /* maxNumChoices */1,
                        /* openTime : None */0,
                        /* closeTime : None */0,
                        /* whitelist : array */[],
                        /* blacklist : array */[]
                      ],
                      /* inputErrors */{ },
                      /* options : array */[
                        "",
                        ""
                      ],
                      /* optionErrors : array */[],
                      /* showAdvanced */false,
                      /* recentPolls : NotAsked */0,
                      /* popularPolls : NotAsked */0,
                      /* recentVotes : NotAsked */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var Id = Belt.Id;

var $$Array = Belt.$$Array;

var SortArray = Belt.SortArray;

var MutableQueue = Belt.MutableQueue;

var MutableStack = Belt.MutableStack;

var List = Belt.List;

var Range = Belt.Range;

var $$Set = Belt.$$Set;

var $$Map = Belt.$$Map;

var MutableSet = Belt.MutableSet;

var MutableMap = Belt.MutableMap;

var HashSet = Belt.HashSet;

var HashMap = Belt.HashMap;

var Option = Belt.Option;

var Result = Belt.Result;

var Debug = Belt.Debug;

var Styles = 0;

exports.Id = Id;
exports.$$Array = $$Array;
exports.SortArray = SortArray;
exports.MutableQueue = MutableQueue;
exports.MutableStack = MutableStack;
exports.List = List;
exports.Range = Range;
exports.$$Set = $$Set;
exports.$$Map = $$Map;
exports.MutableSet = MutableSet;
exports.MutableMap = MutableMap;
exports.HashSet = HashSet;
exports.HashMap = HashMap;
exports.Option = Option;
exports.Result = Result;
exports.Debug = Debug;
exports.Styles = Styles;
exports.nameToString = nameToString;
exports.setTitle = setTitle;
exports.getTitle = getTitle;
exports.setMinNumChoices = setMinNumChoices;
exports.getMinNumChoices = getMinNumChoices;
exports.setMaxNumChoices = setMaxNumChoices;
exports.getMaxNumChoices = getMaxNumChoices;
exports.setOpenTime = setOpenTime;
exports.getOpenTime = getOpenTime;
exports.setCloseTime = setCloseTime;
exports.getCloseTime = getCloseTime;
exports.setWhitelist = setWhitelist;
exports.getWhitelist = getWhitelist;
exports.setBlacklist = setBlacklist;
exports.getBlacklist = getBlacklist;
exports.getInputValue = getInputValue;
exports.setInputValue = setInputValue;
exports.reducer = reducer;
exports.onInputChange = onInputChange;
exports.component = component;
exports.eos = eos;
exports.GetEcho = GetEcho;
exports.GetEchoQuery = GetEchoQuery;
exports.make = make$1;
/* component Not a pure module */


/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,