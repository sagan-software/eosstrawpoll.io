// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Cors = require("cors");
var Http = require("http");
var Block = require("bs-platform/lib/js/block.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Express = require("bs-express/src/Express.js");
var Process = require("process");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReactApollo = require("react-apollo");
var ReactHelmet = require("react-helmet");
var Server = require("glamor/server");
var App$ReactTemplate = require("./Components/App.js");
var Route$ReactTemplate = require("./Components/Route.js");
var Helmet$ReactTemplate = require("./External/Helmet.js");
var ApolloServer$ReactTemplate = require("./External/ApolloServer.js");
var Server_GraphQlServer$ReactTemplate = require("./Server_GraphQlServer.js");

function renderTemplate(content, helmet, apolloClient) {
  var bodyAttributes = Helmet$ReactTemplate.toString(helmet.bodyAttributes);
  var htmlAttributes = Helmet$ReactTemplate.toString(helmet.htmlAttributes);
  var style = Helmet$ReactTemplate.toString(helmet.style);
  var title = Helmet$ReactTemplate.toString(helmet.title);
  var meta = Helmet$ReactTemplate.toString(helmet.meta);
  var script = Helmet$ReactTemplate.toString(helmet.script);
  var staticUrl = process.env.STATIC_URL;
  var apolloState = JSON.stringify(apolloClient.extract());
  var styles = Server.renderStatic((function () {
          return content;
        }));
  var css = styles.css;
  var html = styles.html;
  var ids = JSON.stringify(styles.ids);
  return "<!DOCTYPE html>\n  <html " + (String(htmlAttributes) + (">\n    <head>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n      " + (String(title) + ("\n      " + (String(meta) + ("\n      " + (String(style) + ("\n      <script>\n        window.__APOLLO_STATE__ = " + (String(apolloState) + (";\n        window._glam = " + (String(ids) + (";\n      </script>\n      <style type=\"text/css\" data-glamor>\n        " + (String(css) + ("\n      </style>\n    </head>\n  <body " + (String(bodyAttributes) + (">\n    <div id=\"app\">" + (String(html) + ("</div>\n    <script src=\"" + (String(staticUrl) + ("/client.js\"></script>\n    " + (String(script) + "\n  </body>\n  </html>\n")))))))))))))))))))));
}

function renderHtml(apolloClient, _, req, res) {
  var path = Express.Request[/* path */16](req);
  var route = Route$ReactTemplate.fromString(path);
  return ReactApollo.renderToStringWithData(ReasonReact.element(/* None */0, /* None */0, App$ReactTemplate.make(apolloClient, /* Some */[route], /* array */[]))).then((function (content) {
                var helmet = ReactHelmet.Helmet.renderStatic();
                var template = renderTemplate(content, helmet, apolloClient);
                return Promise.resolve(Express.Response[/* sendString */2](template, res));
              }));
}

function start(apolloClient, schema, logger) {
  var app = Express.App[/* make */15](/* () */0);
  Express.App[/* useOnPathWithMany */3](app, "/graphql", /* array */[
        Cors(),
        Express.Middleware[/* json */0](/* None */0, /* None */0, /* None */0, /* () */0),
        ApolloServer$ReactTemplate.Express[/* graphql */0](schema)
      ]);
  Express.App[/* useOnPathWithMany */3](app, "/graphiql", /* array */[
        Express.Middleware[/* json */0](/* None */0, /* None */0, /* None */0, /* () */0),
        ApolloServer$ReactTemplate.Express[/* graphiql */1]("/graphql", process.env.SITE_WS_URL + "/subscriptions")
      ]);
  Express.App[/* useOnPath */2](app, "/", Express.PromiseMiddleware[/* from */0]((function (param, param$1, param$2) {
              return renderHtml(apolloClient, param, param$1, param$2);
            })));
  var server = Http.createServer(app);
  logger.debug("Starting HTTP server", {
        port: process.env.SITE_PORT
      });
  return new Promise((function (resolve, _) {
                server.listen(process.env.SITE_PORT, (function (e) {
                        var exit = 0;
                        var val;
                        try {
                          val = e;
                          exit = 1;
                        }
                        catch (raw_exn){
                          var exn = Js_exn.internalToOCamlException(raw_exn);
                          if (exn[0] === Js_exn.$$Error) {
                            var e$1 = exn[1];
                            logger.error("Error starting HTTP server", e$1);
                            Process.exit(1);
                            return resolve(/* Error */Block.__(1, [e$1]));
                          } else {
                            throw exn;
                          }
                        }
                        if (exit === 1) {
                          logger.info("Started HTTP server", {
                                port: process.env.SITE_PORT
                              });
                          Server_GraphQlServer$ReactTemplate.SubscriptionServer[/* make */0](schema, server, "/subscriptions");
                          return resolve(/* Ok */Block.__(0, [server]));
                        }
                        
                      }));
                return /* () */0;
              }));
}

exports.renderTemplate = renderTemplate;
exports.renderHtml = renderHtml;
exports.start = start;
/* cors Not a pure module */
