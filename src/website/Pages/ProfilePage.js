// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Link$ReactTemplate = require("../Components/Link.js");
var Helmet$ReactTemplate = require("../External/Helmet.js");

var component = ReasonReact.statelessComponent("ProfilePage");

var Graphql_error = Caml_exceptions.create("ProfilePage-ReactTemplate.AccountData.Graphql_error");

var ppx_printed_query = "query accountData($name: String!)  {\naccount(name: $name)  {\npolls  {\nid  \npollId  \npollCreator  \ntitle  \nopenTime  \ncloseTime  \nblockTime  \n}\nvotes  {\nid  \npollId  \npollCreator  \nblockTime  \n}\ncomments  {\nid  \npollId  \npollCreator  \ncontent  \nblockTime  \n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["account"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2) {
        tmp = /* None */0;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3) {
          var value$1 = match$3[0];
          var match$4 = value$1["polls"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeArray(match$4);
            if (match$5) {
              tmp$2 = match$5[0].map((function (value) {
                      var match = Js_json.decodeObject(value);
                      if (match) {
                        var value$1 = match[0];
                        var match$1 = value$1["id"];
                        var tmp;
                        if (match$1 !== undefined) {
                          var match$2 = Js_json.decodeString(match$1);
                          if (match$2) {
                            tmp = match$2[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$1)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field id on type Poll is missing"
                              ];
                        }
                        var match$3 = value$1["pollId"];
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var match$4 = Js_json.decodeString(match$3);
                          if (match$4) {
                            tmp$1 = match$4[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$3)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field pollId on type Poll is missing"
                              ];
                        }
                        var match$5 = value$1["pollCreator"];
                        var tmp$2;
                        if (match$5 !== undefined) {
                          var match$6 = Js_json.decodeString(match$5);
                          if (match$6) {
                            tmp$2 = match$6[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$5)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field pollCreator on type Poll is missing"
                              ];
                        }
                        var match$7 = value$1["title"];
                        var tmp$3;
                        if (match$7 !== undefined) {
                          var match$8 = Js_json.decodeString(match$7);
                          if (match$8) {
                            tmp$3 = match$8[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$7)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field title on type Poll is missing"
                              ];
                        }
                        var match$9 = value$1["openTime"];
                        var tmp$4;
                        if (match$9 !== undefined) {
                          var match$10 = Js_json.decodeString(match$9);
                          if (match$10) {
                            tmp$4 = match$10[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$9)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field openTime on type Poll is missing"
                              ];
                        }
                        var match$11 = value$1["closeTime"];
                        var tmp$5;
                        if (match$11 !== undefined) {
                          var match$12 = Js_json.decodeNull(match$11);
                          if (match$12) {
                            tmp$5 = /* None */0;
                          } else {
                            var match$13 = Js_json.decodeString(match$11);
                            var tmp$6;
                            if (match$13) {
                              tmp$6 = match$13[0];
                            } else {
                              throw [
                                    Graphql_error,
                                    "Expected string, got " + JSON.stringify(match$11)
                                  ];
                            }
                            tmp$5 = /* Some */[tmp$6];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field closeTime on type Poll is missing"
                              ];
                        }
                        var match$14 = value$1["blockTime"];
                        var tmp$7;
                        if (match$14 !== undefined) {
                          var match$15 = Js_json.decodeString(match$14);
                          if (match$15) {
                            tmp$7 = match$15[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$14)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field blockTime on type Poll is missing"
                              ];
                        }
                        return {
                                id: tmp,
                                pollId: tmp$1,
                                pollCreator: tmp$2,
                                title: tmp$3,
                                openTime: tmp$4,
                                closeTime: tmp$5,
                                blockTime: tmp$7
                              };
                      } else {
                        throw [
                              Graphql_error,
                              "Object is not a value"
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$4)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field polls on type Account is missing"
                ];
          }
          var match$6 = value$1["votes"];
          var tmp$3;
          if (match$6 !== undefined) {
            var match$7 = Js_json.decodeArray(match$6);
            if (match$7) {
              tmp$3 = match$7[0].map((function (value) {
                      var match = Js_json.decodeObject(value);
                      if (match) {
                        var value$1 = match[0];
                        var match$1 = value$1["id"];
                        var tmp;
                        if (match$1 !== undefined) {
                          var match$2 = Js_json.decodeString(match$1);
                          if (match$2) {
                            tmp = match$2[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$1)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field id on type Vote is missing"
                              ];
                        }
                        var match$3 = value$1["pollId"];
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var match$4 = Js_json.decodeString(match$3);
                          if (match$4) {
                            tmp$1 = match$4[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$3)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field pollId on type Vote is missing"
                              ];
                        }
                        var match$5 = value$1["pollCreator"];
                        var tmp$2;
                        if (match$5 !== undefined) {
                          var match$6 = Js_json.decodeString(match$5);
                          if (match$6) {
                            tmp$2 = match$6[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$5)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field pollCreator on type Vote is missing"
                              ];
                        }
                        var match$7 = value$1["blockTime"];
                        var tmp$3;
                        if (match$7 !== undefined) {
                          var match$8 = Js_json.decodeString(match$7);
                          if (match$8) {
                            tmp$3 = match$8[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$7)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field blockTime on type Vote is missing"
                              ];
                        }
                        return {
                                id: tmp,
                                pollId: tmp$1,
                                pollCreator: tmp$2,
                                blockTime: tmp$3
                              };
                      } else {
                        throw [
                              Graphql_error,
                              "Object is not a value"
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$6)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field votes on type Account is missing"
                ];
          }
          var match$8 = value$1["comments"];
          var tmp$4;
          if (match$8 !== undefined) {
            var match$9 = Js_json.decodeArray(match$8);
            if (match$9) {
              tmp$4 = match$9[0].map((function (value) {
                      var match = Js_json.decodeObject(value);
                      if (match) {
                        var value$1 = match[0];
                        var match$1 = value$1["id"];
                        var tmp;
                        if (match$1 !== undefined) {
                          var match$2 = Js_json.decodeString(match$1);
                          if (match$2) {
                            tmp = match$2[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$1)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field id on type Comment is missing"
                              ];
                        }
                        var match$3 = value$1["pollId"];
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var match$4 = Js_json.decodeString(match$3);
                          if (match$4) {
                            tmp$1 = match$4[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$3)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field pollId on type Comment is missing"
                              ];
                        }
                        var match$5 = value$1["pollCreator"];
                        var tmp$2;
                        if (match$5 !== undefined) {
                          var match$6 = Js_json.decodeString(match$5);
                          if (match$6) {
                            tmp$2 = match$6[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$5)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field pollCreator on type Comment is missing"
                              ];
                        }
                        var match$7 = value$1["content"];
                        var tmp$3;
                        if (match$7 !== undefined) {
                          var match$8 = Js_json.decodeString(match$7);
                          if (match$8) {
                            tmp$3 = match$8[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$7)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field content on type Comment is missing"
                              ];
                        }
                        var match$9 = value$1["blockTime"];
                        var tmp$4;
                        if (match$9 !== undefined) {
                          var match$10 = Js_json.decodeString(match$9);
                          if (match$10) {
                            tmp$4 = match$10[0];
                          } else {
                            throw [
                                  Graphql_error,
                                  "Expected string, got " + JSON.stringify(match$9)
                                ];
                          }
                        } else {
                          throw [
                                Graphql_error,
                                "Field blockTime on type Comment is missing"
                              ];
                        }
                        return {
                                id: tmp,
                                pollId: tmp$1,
                                pollCreator: tmp$2,
                                content: tmp$3,
                                blockTime: tmp$4
                              };
                      } else {
                        throw [
                              Graphql_error,
                              "Object is not a value"
                            ];
                      }
                    }));
            } else {
              throw [
                    Graphql_error,
                    "Expected array, got " + JSON.stringify(match$8)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field comments on type Account is missing"
                ];
          }
          tmp$1 = {
            polls: tmp$2,
            votes: tmp$3,
            comments: tmp$4
          };
        } else {
          throw [
                Graphql_error,
                "Object is not a value"
              ];
        }
        tmp = /* Some */[tmp$1];
      }
    } else {
      throw [
            Graphql_error,
            "Field account on type Query is missing"
          ];
    }
    return {
            account: tmp
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(name, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "name",
                  name
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "name",
                  name
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var AccountData = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var AccountDataQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(_, accountName, _$1) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var accountData = make(accountName, /* () */0);
              return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Helmet$ReactTemplate.make(/* array */[
                                  React.createElement("title", undefined, accountName),
                                  React.createElement("meta", {
                                        content: "" + (String(accountName) + " on EOS Straw Poll "),
                                        property: "og:title"
                                      }),
                                  React.createElement("meta", {
                                        content: "" + (String(accountName) + " has created 53 polls "),
                                        property: "og:description"
                                      }),
                                  React.createElement("meta", {
                                        content: "profile",
                                        property: "og:type"
                                      }),
                                  React.createElement("meta", {
                                        content: accountName,
                                        property: "og:profile:username"
                                      })
                                ])), React.createElement("h1", undefined, accountName), "Profile", React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Curry.app(AccountDataQuery[/* make */3], [
                                      /* Some */[accountData.variables],
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      /* None */0,
                                      (function (param) {
                                          var result = param[/* result */0];
                                          if (typeof result === "number") {
                                            return "Loading...";
                                          } else if (result.tag) {
                                            var match = result[0].account;
                                            if (match) {
                                              return $$Array.map((function (p) {
                                                            return React.createElement("div", {
                                                                        key: p.id
                                                                      }, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                                                  p.pollCreator,
                                                                                  p.pollId
                                                                                ]), /* None */0, /* array */[p.title])));
                                                          }), match[0].polls);
                                            } else {
                                              return "No polls created";
                                            }
                                          } else {
                                            return result[0].message;
                                          }
                                        })
                                    ]))));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.AccountData = AccountData;
exports.AccountDataQuery = AccountDataQuery;
exports.make = make$1;
/* component Not a pure module */
