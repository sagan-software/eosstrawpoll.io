// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Belt = require("bs-platform/lib/js/belt.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TypedGlamor = require("bs-typed-glamor/src/TypedGlamor.bs.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Link$ReactTemplate = require("../Components/Link.js");
var Util$ReactTemplate = require("../Util.js");
var Helmet$ReactTemplate = require("../External/Helmet.js");
var PollForm$ReactTemplate = require("../Components/PollForm.js");
var DateFormat$ReactTemplate = require("../Components/DateFormat.js");
var HomePageStyles$ReactTemplate = require("../Styles/HomePageStyles.js");

function nameToString(name) {
  if (name >= 272307608) {
    if (name >= 473709981) {
      if (name >= 697659271) {
        return "whitelist";
      } else {
        return "blacklist";
      }
    } else if (name >= 382421989) {
      return "close_time";
    } else {
      return "title";
    }
  } else if (name !== 78198800) {
    if (name >= 167015550) {
      return "min_num_choices";
    } else {
      return "open_time";
    }
  } else {
    return "max_num_choices";
  }
}

function setTitle(inputs, value) {
  return /* record */[
          /* title */value,
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getTitle(state) {
  return state[/* title */0];
}

function setMinNumChoices(inputs, value) {
  var minNumChoices = Caml_format.caml_int_of_string(value);
  var maxNumChoices = Caml_format.caml_int_of_string(value);
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */minNumChoices,
          /* maxNumChoices */maxNumChoices,
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getMinNumChoices(state) {
  return String(state[/* minNumChoices */1]);
}

function setMaxNumChoices(inputs, value) {
  var minNumChoices = Caml_format.caml_int_of_string(value);
  var maxNumChoices = Caml_format.caml_int_of_string(value);
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */minNumChoices,
          /* maxNumChoices */maxNumChoices,
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getMaxNumChoices(state) {
  return String(state[/* maxNumChoices */2]);
}

function setOpenTime(inputs, value) {
  var openTime = /* Some */[new Date(value)];
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */openTime,
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getOpenTime(state) {
  return Belt_Option.mapWithDefault(state[/* openTime */3], "", (function (prim) {
                return prim.toISOString();
              }));
}

function setCloseTime(inputs, value) {
  var closeTime = /* Some */[new Date(value)];
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */closeTime,
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getCloseTime(inputs) {
  return Belt_Option.mapWithDefault(inputs[/* closeTime */4], "", (function (prim) {
                return prim.toISOString();
              }));
}

function setWhitelist(inputs, value) {
  var whitelist = value.split(",");
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */whitelist,
          /* blacklist */inputs[/* blacklist */6]
        ];
}

function getWhitelist(inputs) {
  return inputs[/* whitelist */5].join(", ");
}

function setBlacklist(inputs, value) {
  var blacklist = value.split(",");
  return /* record */[
          /* title */inputs[/* title */0],
          /* minNumChoices */inputs[/* minNumChoices */1],
          /* maxNumChoices */inputs[/* maxNumChoices */2],
          /* openTime */inputs[/* openTime */3],
          /* closeTime */inputs[/* closeTime */4],
          /* whitelist */inputs[/* whitelist */5],
          /* blacklist */blacklist
        ];
}

function getBlacklist(inputs) {
  return inputs[/* blacklist */6].join(", ");
}

function getInputValue(inputs, name) {
  if (name >= 272307608) {
    if (name >= 473709981) {
      if (name >= 697659271) {
        return inputs[/* whitelist */5].join(", ");
      } else {
        return inputs[/* blacklist */6].join(", ");
      }
    } else if (name >= 382421989) {
      return getCloseTime(inputs);
    } else {
      return inputs[/* title */0];
    }
  } else if (name !== 78198800) {
    if (name >= 167015550) {
      return String(inputs[/* minNumChoices */1]);
    } else {
      return getOpenTime(inputs);
    }
  } else {
    return String(inputs[/* maxNumChoices */2]);
  }
}

function setInputValue(inputs, name, value) {
  if (name >= 272307608) {
    if (name >= 473709981) {
      if (name >= 697659271) {
        return setWhitelist(inputs, value);
      } else {
        return setBlacklist(inputs, value);
      }
    } else if (name >= 382421989) {
      return setCloseTime(inputs, value);
    } else {
      return setTitle(inputs, value);
    }
  } else if (name !== 78198800) {
    if (name >= 167015550) {
      return setMinNumChoices(inputs, value);
    } else {
      return setOpenTime(inputs, value);
    }
  } else {
    return setMaxNumChoices(inputs, value);
  }
}

function reducer(action, state) {
  if (typeof action === "number") {
    return /* Update */Block.__(0, [/* record */[
                /* inputs */state[/* inputs */0],
                /* inputErrors */state[/* inputErrors */1],
                /* options */state[/* options */2],
                /* optionErrors */state[/* optionErrors */3],
                /* showAdvanced */!state[/* showAdvanced */4]
              ]]);
  } else {
    switch (action.tag | 0) {
      case 0 : 
          return /* Update */Block.__(0, [/* record */[
                      /* inputs */action[0],
                      /* inputErrors */state[/* inputErrors */1],
                      /* options */state[/* options */2],
                      /* optionErrors */state[/* optionErrors */3],
                      /* showAdvanced */state[/* showAdvanced */4]
                    ]]);
      case 1 : 
          Belt_Array.set(state[/* options */2], action[0], action[1]);
          return /* Update */Block.__(0, [state]);
      case 2 : 
          return /* Update */Block.__(0, [state]);
      
    }
  }
}

function onInputChange(self, name, $$event) {
  var obj = $$event.target;
  var value = obj.value;
  var inputs = setInputValue(self[/* state */1][/* inputs */0], name, value);
  return Curry._1(self[/* send */3], /* SetInputs */Block.__(0, [inputs]));
}

var component = ReasonReact.reducerComponent("HomePage");

var eos = Util$ReactTemplate.loadEosReadOnly(/* () */0);

var Graphql_error = Caml_exceptions.create("HomePage-ReactTemplate.GetPolls.Graphql_error");

var ppx_printed_query = "query polls  {\npolls  {\nid  \npollId  \npollCreator  \ntitle  \nwhitelist  \nblacklist  \nopenTime  \ncloseTime  \noptions  \nblockTime  \n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["polls"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      if (match$2) {
        tmp = match$2[0].map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match) {
                  var value$1 = match[0];
                  var match$1 = value$1["id"];
                  var tmp;
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeString(match$1);
                    if (match$2) {
                      tmp = match$2[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$1)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field id on type Poll is missing"
                        ];
                  }
                  var match$3 = value$1["pollId"];
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var match$4 = Js_json.decodeString(match$3);
                    if (match$4) {
                      tmp$1 = match$4[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$3)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollId on type Poll is missing"
                        ];
                  }
                  var match$5 = value$1["pollCreator"];
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeString(match$5);
                    if (match$6) {
                      tmp$2 = match$6[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$5)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field pollCreator on type Poll is missing"
                        ];
                  }
                  var match$7 = value$1["title"];
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var match$8 = Js_json.decodeString(match$7);
                    if (match$8) {
                      tmp$3 = match$8[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$7)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field title on type Poll is missing"
                        ];
                  }
                  var match$9 = value$1["whitelist"];
                  var tmp$4;
                  if (match$9 !== undefined) {
                    var match$10 = Js_json.decodeArray(match$9);
                    if (match$10) {
                      tmp$4 = match$10[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$9)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field whitelist on type Poll is missing"
                        ];
                  }
                  var match$11 = value$1["blacklist"];
                  var tmp$5;
                  if (match$11 !== undefined) {
                    var match$12 = Js_json.decodeArray(match$11);
                    if (match$12) {
                      tmp$5 = match$12[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$11)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blacklist on type Poll is missing"
                        ];
                  }
                  var match$13 = value$1["openTime"];
                  var tmp$6;
                  if (match$13 !== undefined) {
                    var match$14 = Js_json.decodeString(match$13);
                    if (match$14) {
                      tmp$6 = match$14[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$13)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field openTime on type Poll is missing"
                        ];
                  }
                  var match$15 = value$1["closeTime"];
                  var tmp$7;
                  if (match$15 !== undefined) {
                    var match$16 = Js_json.decodeNull(match$15);
                    if (match$16) {
                      tmp$7 = /* None */0;
                    } else {
                      var match$17 = Js_json.decodeString(match$15);
                      var tmp$8;
                      if (match$17) {
                        tmp$8 = match$17[0];
                      } else {
                        throw [
                              Graphql_error,
                              "Expected string, got " + JSON.stringify(match$15)
                            ];
                      }
                      tmp$7 = /* Some */[tmp$8];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field closeTime on type Poll is missing"
                        ];
                  }
                  var match$18 = value$1["options"];
                  var tmp$9;
                  if (match$18 !== undefined) {
                    var match$19 = Js_json.decodeArray(match$18);
                    if (match$19) {
                      tmp$9 = match$19[0].map((function (value) {
                              var match = Js_json.decodeString(value);
                              if (match) {
                                return match[0];
                              } else {
                                throw [
                                      Graphql_error,
                                      "Expected string, got " + JSON.stringify(value)
                                    ];
                              }
                            }));
                    } else {
                      throw [
                            Graphql_error,
                            "Expected array, got " + JSON.stringify(match$18)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field options on type Poll is missing"
                        ];
                  }
                  var match$20 = value$1["blockTime"];
                  var tmp$10;
                  if (match$20 !== undefined) {
                    var match$21 = Js_json.decodeString(match$20);
                    if (match$21) {
                      tmp$10 = match$21[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$20)
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field blockTime on type Poll is missing"
                        ];
                  }
                  return {
                          id: tmp,
                          pollId: tmp$1,
                          pollCreator: tmp$2,
                          title: tmp$3,
                          whitelist: tmp$4,
                          blacklist: tmp$5,
                          openTime: tmp$6,
                          closeTime: tmp$7,
                          options: tmp$9,
                          blockTime: tmp$10
                        };
                } else {
                  throw [
                        Graphql_error,
                        "Object is not a value"
                      ];
                }
              }));
      } else {
        throw [
              Graphql_error,
              "Expected array, got " + JSON.stringify(match$1)
            ];
      }
    } else {
      throw [
            Graphql_error,
            "Field polls on type Query is missing"
          ];
    }
    return {
            polls: tmp
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function make() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetPolls = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetPollsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(_, _$1) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return React.createElement("main", {
                          className: TypedGlamor.toString(HomePageStyles$ReactTemplate.main)
                        }, ReasonReact.element(/* None */0, /* None */0, Helmet$ReactTemplate.make(/* array */[
                                  React.createElement("title", undefined, "Home page"),
                                  React.createElement("meta", {
                                        content: "EOS Straw Poll",
                                        property: "og:title"
                                      }),
                                  React.createElement("meta", {
                                        content: "Home page!!!",
                                        property: "og:description"
                                      })
                                ])), React.createElement("div", {
                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.form)
                            }, React.createElement("h1", undefined, "Create a poll"), ReasonReact.element(/* None */0, /* None */0, PollForm$ReactTemplate.make(/* array */[]))), React.createElement("aside", {
                              className: TypedGlamor.toString(HomePageStyles$ReactTemplate.sidebar)
                            }, React.createElement("div", {
                                  className: TypedGlamor.toString(HomePageStyles$ReactTemplate.poll)
                                }, React.createElement("h2", {
                                      className: TypedGlamor.toString(HomePageStyles$ReactTemplate.pollTitle)
                                    }, "New Polls"), ReasonReact.element(/* None */0, /* None */0, Curry.app(GetPollsQuery[/* make */3], [
                                          /* None */0,
                                          /* None */0,
                                          /* None */0,
                                          /* None */0,
                                          /* None */0,
                                          /* None */0,
                                          /* None */0,
                                          /* None */0,
                                          /* None */0,
                                          (function (param) {
                                              var result = param[/* result */0];
                                              if (typeof result === "number") {
                                                return "Loading...";
                                              } else if (result.tag) {
                                                return React.createElement("ul", undefined, result[0].polls.map((function (p, _) {
                                                                  var date = new Date(p.blockTime + "Z");
                                                                  return React.createElement("li", {
                                                                              key: p.id
                                                                            }, React.createElement("h3", undefined, ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Poll */Block.__(1, [
                                                                                            p.pollCreator,
                                                                                            p.pollId
                                                                                          ]), /* None */0, /* array */[p.title]))), React.createElement("p", undefined, ReasonReact.element(/* None */0, /* None */0, DateFormat$ReactTemplate.make(date, /* array */[])), " by ", ReasonReact.element(/* None */0, /* None */0, Link$ReactTemplate.make(/* Profile */Block.__(0, [p.pollCreator]), /* None */0, /* array */[p.pollCreator]))));
                                                                })));
                                              } else {
                                                return result[0].message;
                                              }
                                            })
                                        ])))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* inputs : record */[
                        /* title */"",
                        /* minNumChoices */1,
                        /* maxNumChoices */1,
                        /* openTime : None */0,
                        /* closeTime : None */0,
                        /* whitelist : array */[],
                        /* blacklist : array */[]
                      ],
                      /* inputErrors */{ },
                      /* options : array */[
                        "",
                        ""
                      ],
                      /* optionErrors : array */[],
                      /* showAdvanced */false
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var Id = Belt.Id;

var $$Array = Belt.$$Array;

var SortArray = Belt.SortArray;

var MutableQueue = Belt.MutableQueue;

var MutableStack = Belt.MutableStack;

var List = Belt.List;

var Range = Belt.Range;

var $$Set = Belt.$$Set;

var $$Map = Belt.$$Map;

var MutableSet = Belt.MutableSet;

var MutableMap = Belt.MutableMap;

var HashSet = Belt.HashSet;

var HashMap = Belt.HashMap;

var Option = Belt.Option;

var Result = Belt.Result;

var Debug = Belt.Debug;

var Styles = 0;

exports.Id = Id;
exports.$$Array = $$Array;
exports.SortArray = SortArray;
exports.MutableQueue = MutableQueue;
exports.MutableStack = MutableStack;
exports.List = List;
exports.Range = Range;
exports.$$Set = $$Set;
exports.$$Map = $$Map;
exports.MutableSet = MutableSet;
exports.MutableMap = MutableMap;
exports.HashSet = HashSet;
exports.HashMap = HashMap;
exports.Option = Option;
exports.Result = Result;
exports.Debug = Debug;
exports.Styles = Styles;
exports.nameToString = nameToString;
exports.setTitle = setTitle;
exports.getTitle = getTitle;
exports.setMinNumChoices = setMinNumChoices;
exports.getMinNumChoices = getMinNumChoices;
exports.setMaxNumChoices = setMaxNumChoices;
exports.getMaxNumChoices = getMaxNumChoices;
exports.setOpenTime = setOpenTime;
exports.getOpenTime = getOpenTime;
exports.setCloseTime = setCloseTime;
exports.getCloseTime = getCloseTime;
exports.setWhitelist = setWhitelist;
exports.getWhitelist = getWhitelist;
exports.setBlacklist = setBlacklist;
exports.getBlacklist = getBlacklist;
exports.getInputValue = getInputValue;
exports.setInputValue = setInputValue;
exports.reducer = reducer;
exports.onInputChange = onInputChange;
exports.component = component;
exports.eos = eos;
exports.GetPolls = GetPolls;
exports.GetPollsQuery = GetPollsQuery;
exports.make = make$1;
/* component Not a pure module */
