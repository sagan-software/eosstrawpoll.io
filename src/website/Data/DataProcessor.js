// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Db$ReactTemplate = require("./Db.js");
var WebServerEnv$ReactTemplate = require("../Env/WebServerEnv.js");

function blockByTrxId(mongo, trxId) {
  return Curry._1(Db$ReactTemplate.Eos[/* Blocks */1][/* collection */3], mongo).find({
                  "block.transactions.trx.id": trxId
                }).limit(1).next();
}

function onCreateAction(mongo, trxId, block, fields) {
  return Db$ReactTemplate.Polls[/* save */9](mongo, {
              id: fields.poll_creator + ("_" + (fields.poll_id + ("_" + String(block.block_num)))),
              pollId: fields.poll_id,
              pollCreator: fields.poll_creator,
              version: 1,
              title: fields.title,
              description: fields.description,
              options: fields.options,
              whitelist: fields.whitelist,
              blacklist: fields.blacklist,
              openTime: fields.open_time,
              closeTime: fields.close_time,
              blockId: block.block_id,
              blockNum: block.block_num,
              blockTime: block.block.timestamp,
              trxId: trxId,
              appLabel: fields.app_label
            });
}

function onVoteAction(mongo, trxId, block, fields) {
  return Db$ReactTemplate.Votes[/* save */9](mongo, {
              id: fields.poll_creator + ("_" + (fields.poll_id + ("_" + (fields.voter + ("_" + String(block.block_num)))))),
              pollId: fields.poll_id,
              pollCreator: fields.poll_creator,
              pollVersion: 1,
              voter: fields.voter,
              choices: fields.choices,
              blockId: block.block_id,
              blockNum: block.block_num,
              blockTime: block.block.timestamp,
              trxId: trxId,
              appLabel: fields.app_label
            });
}

function onCommentAction(mongo, trxId, block, fields) {
  return Db$ReactTemplate.Comments[/* save */9](mongo, {
              id: fields.poll_creator + ("_" + (fields.poll_id + ("_" + (fields.commenter + ("_" + String(block.block_num)))))),
              pollId: fields.poll_id,
              pollCreator: fields.poll_creator,
              pollVersion: 1,
              commenter: fields.commenter,
              content: fields.content,
              blockId: block.block_id,
              blockNum: block.block_num,
              blockTime: block.block.timestamp,
              trxId: trxId,
              appLabel: fields.app_label
            });
}

function onActionsChange(client, change) {
  var fullDocument = change.fullDocument;
  var name = fullDocument.name;
  var data = fullDocument.data;
  var trxId = fullDocument.trx_id;
  console.log("New action", name, fullDocument);
  setTimeout((function () {
          blockByTrxId(client, trxId).then((function (block) {
                    var b = Js_option.getWithDefault({
                          block_num: -1,
                          block_id: "",
                          block: {
                            timestamp: ""
                          }
                        }, (block == null) ? /* None */0 : [block]);
                    console.log("!!!!!! BLOaaCK", trxId, b);
                    switch (name) {
                      case "create" : 
                          onCreateAction(client, trxId, b, data);
                          break;
                      case "vote" : 
                          onVoteAction(client, trxId, b, data);
                          break;
                      default:
                        console.log("unknown action:", name);
                    }
                    return Promise.resolve(/* () */0);
                  })).catch((function (e) {
                  console.log("Error getting block ", e);
                  return Promise.resolve(/* () */0);
                }));
          return /* () */0;
        }), 750);
  return /* () */0;
}

function onBlocksChange(mongo, change) {
  var block = change.fullDocument;
  console.log("block change", block.block_num);
  Db$ReactTemplate.Blocks[/* save */9](mongo, {
        id: block.block_id,
        num: block.block_num,
        time: block.block.timestamp
      });
  return /* () */0;
}

function listenToActions(mongo) {
  return Promise.resolve(Curry._1(Db$ReactTemplate.Eos[/* Actions */0][/* collection */3], mongo).watch(/* array */[{
                      $match: {
                        operationType: "insert",
                        "fullDocument.account": WebServerEnv$ReactTemplate.contractAccount
                      }
                    }]).on("change", (function (param) {
                    return onActionsChange(mongo, param);
                  })));
}

function listenToBlocks(mongo) {
  return Promise.resolve(Curry._1(Db$ReactTemplate.Eos[/* Blocks */1][/* collection */3], mongo).watch(/* array */[{
                      $match: {
                        operationType: "insert"
                      }
                    }]).on("change", (function (param) {
                    return onBlocksChange(mongo, param);
                  })));
}

function listen(mongo) {
  return Promise.all(/* tuple */[
              listenToActions(mongo),
              listenToBlocks(mongo)
            ]);
}

exports.blockByTrxId = blockByTrxId;
exports.onCreateAction = onCreateAction;
exports.onVoteAction = onVoteAction;
exports.onCommentAction = onCommentAction;
exports.onActionsChange = onActionsChange;
exports.onBlocksChange = onBlocksChange;
exports.listenToActions = listenToActions;
exports.listenToBlocks = listenToBlocks;
exports.listen = listen;
/* Db-ReactTemplate Not a pure module */
